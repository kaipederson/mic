
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003e14  08003e14  00013e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e70  08003e70  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003e70  08003e70  00013e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e78  08003e78  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e78  08003e78  00013e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e7c  08003e7c  00013e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000070  08003ef0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08003ef0  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c29d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e59  00000000  00000000  0002c33d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  0002e198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000818  00000000  00000000  0002ea68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000161bd  00000000  00000000  0002f280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf3c  00000000  00000000  0004543d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087e53  00000000  00000000  00051379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d91cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026cc  00000000  00000000  000d9220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003dfc 	.word	0x08003dfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003dfc 	.word	0x08003dfc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fb0a 	bl	8000ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f812 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f8f6 	bl	8000784 <MX_GPIO_Init>
  MX_DMA_Init();
 8000598:	f000 f8d4 	bl	8000744 <MX_DMA_Init>
  MX_I2S1_Init();
 800059c:	f000 f87a 	bl	8000694 <MX_I2S1_Init>

  MX_USART2_UART_Init();
 80005a0:	f000 f8a6 	bl	80006f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_DMA_RegisterCallback(&hdma_spi1_rx,  HAL_DMA_XFER_CPLT_CB_ID, &DMATransferComplete);
  HAL_I2S_Receive_DMA(&hi2s1, data_in, 4);
 80005a4:	2204      	movs	r2, #4
 80005a6:	4902      	ldr	r1, [pc, #8]	; (80005b0 <main+0x28>)
 80005a8:	4802      	ldr	r0, [pc, #8]	; (80005b4 <main+0x2c>)
 80005aa:	f001 fab3 	bl	8001b14 <HAL_I2S_Receive_DMA>
  int32_t data_full;
  int32_t audio1;
  int32_t audio2;


  while (1)
 80005ae:	e7fe      	b.n	80005ae <main+0x26>
 80005b0:	20000098 	.word	0x20000098
 80005b4:	200000a0 	.word	0x200000a0

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 ffe2 	bl	8003590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 80005dc:	4b2b      	ldr	r3, [pc, #172]	; (800068c <SystemClock_Config+0xd4>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005e4:	4a29      	ldr	r2, [pc, #164]	; (800068c <SystemClock_Config+0xd4>)
 80005e6:	f043 0310 	orr.w	r3, r3, #16
 80005ea:	6053      	str	r3, [r2, #4]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80005ec:	4b27      	ldr	r3, [pc, #156]	; (800068c <SystemClock_Config+0xd4>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	4a26      	ldr	r2, [pc, #152]	; (800068c <SystemClock_Config+0xd4>)
 80005f2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80005f6:	6053      	str	r3, [r2, #4]
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b23      	ldr	r3, [pc, #140]	; (800068c <SystemClock_Config+0xd4>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a22      	ldr	r2, [pc, #136]	; (800068c <SystemClock_Config+0xd4>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b20      	ldr	r3, [pc, #128]	; (800068c <SystemClock_Config+0xd4>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <SystemClock_Config+0xd8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a1c      	ldr	r2, [pc, #112]	; (8000690 <SystemClock_Config+0xd8>)
 800061e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <SystemClock_Config+0xd8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800063c:	2300      	movs	r3, #0
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fec9 	bl	80023e0 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000654:	f000 f8f2 	bl	800083c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f002 f92c 	bl	80028d0 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800067e:	f000 f8dd 	bl	800083c <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_I2S1_Init+0x54>)
 800069a:	4a14      	ldr	r2, [pc, #80]	; (80006ec <MX_I2S1_Init+0x58>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_I2S1_Init+0x54>)
 80006a0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006a4:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_I2S1_Init+0x54>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_I2S1_Init+0x54>)
 80006ae:	2203      	movs	r2, #3
 80006b0:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <MX_I2S1_Init+0x54>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_I2S1_Init+0x54>)
 80006ba:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80006be:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_I2S1_Init+0x54>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_I2S1_Init+0x54>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_I2S1_Init+0x54>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_I2S1_Init+0x54>)
 80006d4:	f001 f8de 	bl	8001894 <HAL_I2S_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_I2S1_Init+0x4e>
  {
    Error_Handler();
 80006de:	f000 f8ad 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000a0 	.word	0x200000a0
 80006ec:	40013000 	.word	0x40013000

080006f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART2_UART_Init+0x4c>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_USART2_UART_Init+0x50>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_USART2_UART_Init+0x4c>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART2_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000728:	f002 fbf2 	bl	8002f10 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000732:	f000 f883 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200000f4 	.word	0x200000f4
 8000740:	40004400 	.word	0x40004400

08000744 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_DMA_Init+0x3c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <MX_DMA_Init+0x3c>)
 8000754:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_DMA_Init+0x3c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	2038      	movs	r0, #56	; 0x38
 800076c:	f000 fb67 	bl	8000e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000770:	2038      	movs	r0, #56	; 0x38
 8000772:	f000 fb80 	bl	8000e76 <HAL_NVIC_EnableIRQ>

}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_GPIO_Init+0x30>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <MX_GPIO_Init+0x30>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_GPIO_Init+0x30>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <HAL_I2S_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	int32_t audio1 = (int32_t)(data_in[0] << 16 | data_in[1]);
 80007c0:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <HAL_I2S_RxCpltCallback+0x44>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	041b      	lsls	r3, r3, #16
 80007c6:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <HAL_I2S_RxCpltCallback+0x44>)
 80007c8:	8852      	ldrh	r2, [r2, #2]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
	audio1 = audio1 >> 14;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	139b      	asrs	r3, r3, #14
 80007d2:	60fb      	str	r3, [r7, #12]
	sprintf((char*)buf,"%li\r\n",audio1);
 80007d4:	68fa      	ldr	r2, [r7, #12]
 80007d6:	490a      	ldr	r1, [pc, #40]	; (8000800 <HAL_I2S_RxCpltCallback+0x48>)
 80007d8:	480a      	ldr	r0, [pc, #40]	; (8000804 <HAL_I2S_RxCpltCallback+0x4c>)
 80007da:	f002 fee1 	bl	80035a0 <siprintf>
	HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), 100);
 80007de:	4809      	ldr	r0, [pc, #36]	; (8000804 <HAL_I2S_RxCpltCallback+0x4c>)
 80007e0:	f7ff fcfe 	bl	80001e0 <strlen>
 80007e4:	4603      	mov	r3, r0
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	4906      	ldr	r1, [pc, #24]	; (8000804 <HAL_I2S_RxCpltCallback+0x4c>)
 80007ec:	4806      	ldr	r0, [pc, #24]	; (8000808 <HAL_I2S_RxCpltCallback+0x50>)
 80007ee:	f002 fbdc 	bl	8002faa <HAL_UART_Transmit>
}
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000098 	.word	0x20000098
 8000800:	08003e14 	.word	0x08003e14
 8000804:	200000e8 	.word	0x200000e8
 8000808:	200000f4 	.word	0x200000f4

0800080c <HAL_I2S_RxHalfCpltCallback>:



void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
uint16_t b = data_in[1];
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_I2S_RxHalfCpltCallback+0x2c>)
 8000816:	885b      	ldrh	r3, [r3, #2]
 8000818:	81fb      	strh	r3, [r7, #14]
uint16_t a = data_in[0];
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <HAL_I2S_RxHalfCpltCallback+0x2c>)
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	81bb      	strh	r3, [r7, #12]
a++; b++;
 8000820:	89bb      	ldrh	r3, [r7, #12]
 8000822:	3301      	adds	r3, #1
 8000824:	81bb      	strh	r3, [r7, #12]
 8000826:	89fb      	ldrh	r3, [r7, #14]
 8000828:	3301      	adds	r3, #1
 800082a:	81fb      	strh	r3, [r7, #14]
}
 800082c:	bf00      	nop
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	20000098 	.word	0x20000098

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <HAL_MspInit+0x4c>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085c:	6453      	str	r3, [r2, #68]	; 0x44
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x4c>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b090      	sub	sp, #64	; 0x40
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
 80008c0:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI1)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a3b      	ldr	r2, [pc, #236]	; (80009b4 <HAL_I2S_MspInit+0x11c>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d16e      	bne.n	80009aa <HAL_I2S_MspInit+0x112>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008cc:	2301      	movs	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008d0:	23c0      	movs	r3, #192	; 0xc0
 80008d2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 80008d4:	2310      	movs	r3, #16
 80008d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008d8:	2302      	movs	r3, #2
 80008da:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4618      	mov	r0, r3
 80008e2:	f002 f9c5 	bl	8002c70 <HAL_RCCEx_PeriphCLKConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 80008ec:	f7ff ffa6 	bl	800083c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <HAL_I2S_MspInit+0x120>)
 80008f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f8:	4a2f      	ldr	r2, [pc, #188]	; (80009b8 <HAL_I2S_MspInit+0x120>)
 80008fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008fe:	6453      	str	r3, [r2, #68]	; 0x44
 8000900:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <HAL_I2S_MspInit+0x120>)
 8000902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <HAL_I2S_MspInit+0x120>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	4a28      	ldr	r2, [pc, #160]	; (80009b8 <HAL_I2S_MspInit+0x120>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	6313      	str	r3, [r2, #48]	; 0x30
 800091c:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <HAL_I2S_MspInit+0x120>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000928:	23b0      	movs	r3, #176	; 0xb0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000938:	2305      	movs	r3, #5
 800093a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000940:	4619      	mov	r1, r3
 8000942:	481e      	ldr	r0, [pc, #120]	; (80009bc <HAL_I2S_MspInit+0x124>)
 8000944:	f000 fe22 	bl	800158c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <HAL_I2S_MspInit+0x128>)
 800094a:	4a1e      	ldr	r2, [pc, #120]	; (80009c4 <HAL_I2S_MspInit+0x12c>)
 800094c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <HAL_I2S_MspInit+0x128>)
 8000950:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000954:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000956:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <HAL_I2S_MspInit+0x128>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <HAL_I2S_MspInit+0x128>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <HAL_I2S_MspInit+0x128>)
 8000964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000968:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <HAL_I2S_MspInit+0x128>)
 800096c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000970:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <HAL_I2S_MspInit+0x128>)
 8000974:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000978:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <HAL_I2S_MspInit+0x128>)
 800097c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000980:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <HAL_I2S_MspInit+0x128>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000988:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_I2S_MspInit+0x128>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800098e:	480c      	ldr	r0, [pc, #48]	; (80009c0 <HAL_I2S_MspInit+0x128>)
 8000990:	f000 fa8c 	bl	8000eac <HAL_DMA_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <HAL_I2S_MspInit+0x106>
    {
      Error_Handler();
 800099a:	f7ff ff4f 	bl	800083c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <HAL_I2S_MspInit+0x128>)
 80009a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80009a4:	4a06      	ldr	r2, [pc, #24]	; (80009c0 <HAL_I2S_MspInit+0x128>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009aa:	bf00      	nop
 80009ac:	3740      	adds	r7, #64	; 0x40
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40013000 	.word	0x40013000
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020000 	.word	0x40020000
 80009c0:	20000138 	.word	0x20000138
 80009c4:	40026410 	.word	0x40026410

080009c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <HAL_UART_MspInit+0x84>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d12b      	bne.n	8000a42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_UART_MspInit+0x88>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <HAL_UART_MspInit+0x88>)
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_UART_MspInit+0x88>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_UART_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <HAL_UART_MspInit+0x88>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_UART_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a22:	230c      	movs	r3, #12
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a32:	2307      	movs	r3, #7
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <HAL_UART_MspInit+0x8c>)
 8000a3e:	f000 fda5 	bl	800158c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40004400 	.word	0x40004400
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020000 	.word	0x40020000

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa4:	f000 f8d0 	bl	8000c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <DMA2_Stream0_IRQHandler+0x10>)
 8000ab2:	f000 fb01 	bl	80010b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000138 	.word	0x20000138

08000ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <_sbrk+0x5c>)
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <_sbrk+0x60>)
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <_sbrk+0x64>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <_sbrk+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af0:	f002 fd24 	bl	800353c <__errno>
 8000af4:	4603      	mov	r3, r0
 8000af6:	220c      	movs	r2, #12
 8000af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	e009      	b.n	8000b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <_sbrk+0x64>)
 8000b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20020000 	.word	0x20020000
 8000b20:	00000400 	.word	0x00000400
 8000b24:	2000008c 	.word	0x2000008c
 8000b28:	200001b0 	.word	0x200001b0

08000b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b56:	490e      	ldr	r1, [pc, #56]	; (8000b90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b58:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b6c:	4c0b      	ldr	r4, [pc, #44]	; (8000b9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b7a:	f7ff ffd7 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f002 fce3 	bl	8003548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f7ff fd01 	bl	8000588 <main>
  bx  lr    
 8000b86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b94:	08003e80 	.word	0x08003e80
  ldr r2, =_sbss
 8000b98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b9c:	200001ac 	.word	0x200001ac

08000ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <HAL_Init+0x40>)
 8000bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_Init+0x40>)
 8000bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_Init+0x40>)
 8000bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f92b 	bl	8000e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	f000 f808 	bl	8000be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f7ff fe36 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023c00 	.word	0x40023c00

08000be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_InitTick+0x54>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x58>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f943 	bl	8000e92 <HAL_SYSTICK_Config>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00e      	b.n	8000c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d80a      	bhi.n	8000c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f000 f90b 	bl	8000e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <HAL_InitTick+0x5c>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e000      	b.n	8000c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000004 	.word	0x20000004

08000c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x20>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x24>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_IncTick+0x24>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000198 	.word	0x20000198

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_GetTick+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000198 	.word	0x20000198

08000c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	f003 0307 	and.w	r3, r3, #7
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	db0b      	blt.n	8000d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f003 021f 	and.w	r2, r3, #31
 8000d04:	4907      	ldr	r1, [pc, #28]	; (8000d24 <__NVIC_EnableIRQ+0x38>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	095b      	lsrs	r3, r3, #5
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000e100 	.word	0xe000e100

08000d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db0a      	blt.n	8000d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	490c      	ldr	r1, [pc, #48]	; (8000d74 <__NVIC_SetPriority+0x4c>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d50:	e00a      	b.n	8000d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4908      	ldr	r1, [pc, #32]	; (8000d78 <__NVIC_SetPriority+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	440b      	add	r3, r1
 8000d66:	761a      	strb	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	bf28      	it	cs
 8000d9a:	2304      	movcs	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d902      	bls.n	8000dac <NVIC_EncodePriority+0x30>
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3b03      	subs	r3, #3
 8000daa:	e000      	b.n	8000dae <NVIC_EncodePriority+0x32>
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
         );
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	; 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df4:	d301      	bcc.n	8000dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00f      	b.n	8000e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <SysTick_Config+0x40>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e02:	210f      	movs	r1, #15
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f7ff ff8e 	bl	8000d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <SysTick_Config+0x40>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <SysTick_Config+0x40>)
 8000e14:	2207      	movs	r2, #7
 8000e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	e000e010 	.word	0xe000e010

08000e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff29 	bl	8000c88 <__NVIC_SetPriorityGrouping>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e50:	f7ff ff3e 	bl	8000cd0 <__NVIC_GetPriorityGrouping>
 8000e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	6978      	ldr	r0, [r7, #20]
 8000e5c:	f7ff ff8e 	bl	8000d7c <NVIC_EncodePriority>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff5d 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff31 	bl	8000cec <__NVIC_EnableIRQ>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ffa2 	bl	8000de4 <SysTick_Config>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	f7ff feda 	bl	8000c70 <HAL_GetTick>
 8000ebc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d101      	bne.n	8000ec8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e099      	b.n	8000ffc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2202      	movs	r2, #2
 8000ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f022 0201 	bic.w	r2, r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ee8:	e00f      	b.n	8000f0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000eea:	f7ff fec1 	bl	8000c70 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b05      	cmp	r3, #5
 8000ef6:	d908      	bls.n	8000f0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2220      	movs	r2, #32
 8000efc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2203      	movs	r2, #3
 8000f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e078      	b.n	8000ffc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1e8      	bne.n	8000eea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	4b38      	ldr	r3, [pc, #224]	; (8001004 <HAL_DMA_Init+0x158>)
 8000f24:	4013      	ands	r3, r2
 8000f26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f60:	2b04      	cmp	r3, #4
 8000f62:	d107      	bne.n	8000f74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f023 0307 	bic.w	r3, r3, #7
 8000f8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d117      	bne.n	8000fce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00e      	beq.n	8000fce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 fa6f 	bl	8001494 <DMA_CheckFifoParam>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d008      	beq.n	8000fce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2240      	movs	r2, #64	; 0x40
 8000fc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e016      	b.n	8000ffc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 fa26 	bl	8001428 <DMA_CalcBaseAndBitshift>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fe4:	223f      	movs	r2, #63	; 0x3f
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	f010803f 	.word	0xf010803f

08001008 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001026:	2b01      	cmp	r3, #1
 8001028:	d101      	bne.n	800102e <HAL_DMA_Start_IT+0x26>
 800102a:	2302      	movs	r3, #2
 800102c:	e040      	b.n	80010b0 <HAL_DMA_Start_IT+0xa8>
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b01      	cmp	r3, #1
 8001040:	d12f      	bne.n	80010a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2202      	movs	r2, #2
 8001046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2200      	movs	r2, #0
 800104e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f000 f9b8 	bl	80013cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001060:	223f      	movs	r2, #63	; 0x3f
 8001062:	409a      	lsls	r2, r3
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0216 	orr.w	r2, r2, #22
 8001076:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	2b00      	cmp	r3, #0
 800107e:	d007      	beq.n	8001090 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 0208 	orr.w	r2, r2, #8
 800108e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0201 	orr.w	r2, r2, #1
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	e005      	b.n	80010ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80010aa:	2302      	movs	r3, #2
 80010ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80010ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80010c4:	4b92      	ldr	r3, [pc, #584]	; (8001310 <HAL_DMA_IRQHandler+0x258>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a92      	ldr	r2, [pc, #584]	; (8001314 <HAL_DMA_IRQHandler+0x25c>)
 80010ca:	fba2 2303 	umull	r2, r3, r2, r3
 80010ce:	0a9b      	lsrs	r3, r3, #10
 80010d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e2:	2208      	movs	r2, #8
 80010e4:	409a      	lsls	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d01a      	beq.n	8001124 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d013      	beq.n	8001124 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0204 	bic.w	r2, r2, #4
 800110a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001110:	2208      	movs	r2, #8
 8001112:	409a      	lsls	r2, r3
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800111c:	f043 0201 	orr.w	r2, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001128:	2201      	movs	r2, #1
 800112a:	409a      	lsls	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4013      	ands	r3, r2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d012      	beq.n	800115a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00b      	beq.n	800115a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001146:	2201      	movs	r2, #1
 8001148:	409a      	lsls	r2, r3
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001152:	f043 0202 	orr.w	r2, r3, #2
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800115e:	2204      	movs	r2, #4
 8001160:	409a      	lsls	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4013      	ands	r3, r2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d012      	beq.n	8001190 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00b      	beq.n	8001190 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117c:	2204      	movs	r2, #4
 800117e:	409a      	lsls	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001188:	f043 0204 	orr.w	r2, r3, #4
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001194:	2210      	movs	r2, #16
 8001196:	409a      	lsls	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4013      	ands	r3, r2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d043      	beq.n	8001228 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d03c      	beq.n	8001228 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b2:	2210      	movs	r2, #16
 80011b4:	409a      	lsls	r2, r3
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d018      	beq.n	80011fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d108      	bne.n	80011e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d024      	beq.n	8001228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	4798      	blx	r3
 80011e6:	e01f      	b.n	8001228 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d01b      	beq.n	8001228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	4798      	blx	r3
 80011f8:	e016      	b.n	8001228 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001204:	2b00      	cmp	r3, #0
 8001206:	d107      	bne.n	8001218 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0208 	bic.w	r2, r2, #8
 8001216:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122c:	2220      	movs	r2, #32
 800122e:	409a      	lsls	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4013      	ands	r3, r2
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 808e 	beq.w	8001356 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0310 	and.w	r3, r3, #16
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 8086 	beq.w	8001356 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124e:	2220      	movs	r2, #32
 8001250:	409a      	lsls	r2, r3
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b05      	cmp	r3, #5
 8001260:	d136      	bne.n	80012d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0216 	bic.w	r2, r2, #22
 8001270:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	695a      	ldr	r2, [r3, #20]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001280:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	2b00      	cmp	r3, #0
 8001288:	d103      	bne.n	8001292 <HAL_DMA_IRQHandler+0x1da>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800128e:	2b00      	cmp	r3, #0
 8001290:	d007      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0208 	bic.w	r2, r2, #8
 80012a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a6:	223f      	movs	r2, #63	; 0x3f
 80012a8:	409a      	lsls	r2, r3
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d07d      	beq.n	80013c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	4798      	blx	r3
        }
        return;
 80012ce:	e078      	b.n	80013c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d01c      	beq.n	8001318 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d108      	bne.n	80012fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d030      	beq.n	8001356 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	4798      	blx	r3
 80012fc:	e02b      	b.n	8001356 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001302:	2b00      	cmp	r3, #0
 8001304:	d027      	beq.n	8001356 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	4798      	blx	r3
 800130e:	e022      	b.n	8001356 <HAL_DMA_IRQHandler+0x29e>
 8001310:	20000000 	.word	0x20000000
 8001314:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10f      	bne.n	8001346 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0210 	bic.w	r2, r2, #16
 8001334:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800135a:	2b00      	cmp	r3, #0
 800135c:	d032      	beq.n	80013c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d022      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2205      	movs	r2, #5
 800136e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0201 	bic.w	r2, r2, #1
 8001380:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	3301      	adds	r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	429a      	cmp	r2, r3
 800138c:	d307      	bcc.n	800139e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f2      	bne.n	8001382 <HAL_DMA_IRQHandler+0x2ca>
 800139c:	e000      	b.n	80013a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800139e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d005      	beq.n	80013c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	4798      	blx	r3
 80013c0:	e000      	b.n	80013c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80013c2:	bf00      	nop
    }
  }
}
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop

080013cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2b40      	cmp	r3, #64	; 0x40
 80013f8:	d108      	bne.n	800140c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800140a:	e007      	b.n	800141c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	60da      	str	r2, [r3, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	3b10      	subs	r3, #16
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <DMA_CalcBaseAndBitshift+0x64>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001442:	4a13      	ldr	r2, [pc, #76]	; (8001490 <DMA_CalcBaseAndBitshift+0x68>)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d909      	bls.n	800146a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800145e:	f023 0303 	bic.w	r3, r3, #3
 8001462:	1d1a      	adds	r2, r3, #4
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	659a      	str	r2, [r3, #88]	; 0x58
 8001468:	e007      	b.n	800147a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001472:	f023 0303 	bic.w	r3, r3, #3
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800147e:	4618      	mov	r0, r3
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	aaaaaaab 	.word	0xaaaaaaab
 8001490:	08003e34 	.word	0x08003e34

08001494 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d11f      	bne.n	80014ee <DMA_CheckFifoParam+0x5a>
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d856      	bhi.n	8001562 <DMA_CheckFifoParam+0xce>
 80014b4:	a201      	add	r2, pc, #4	; (adr r2, 80014bc <DMA_CheckFifoParam+0x28>)
 80014b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ba:	bf00      	nop
 80014bc:	080014cd 	.word	0x080014cd
 80014c0:	080014df 	.word	0x080014df
 80014c4:	080014cd 	.word	0x080014cd
 80014c8:	08001563 	.word	0x08001563
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d046      	beq.n	8001566 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014dc:	e043      	b.n	8001566 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014e6:	d140      	bne.n	800156a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014ec:	e03d      	b.n	800156a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014f6:	d121      	bne.n	800153c <DMA_CheckFifoParam+0xa8>
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d837      	bhi.n	800156e <DMA_CheckFifoParam+0xda>
 80014fe:	a201      	add	r2, pc, #4	; (adr r2, 8001504 <DMA_CheckFifoParam+0x70>)
 8001500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001504:	08001515 	.word	0x08001515
 8001508:	0800151b 	.word	0x0800151b
 800150c:	08001515 	.word	0x08001515
 8001510:	0800152d 	.word	0x0800152d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
      break;
 8001518:	e030      	b.n	800157c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d025      	beq.n	8001572 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800152a:	e022      	b.n	8001572 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001534:	d11f      	bne.n	8001576 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800153a:	e01c      	b.n	8001576 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d903      	bls.n	800154a <DMA_CheckFifoParam+0xb6>
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	2b03      	cmp	r3, #3
 8001546:	d003      	beq.n	8001550 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001548:	e018      	b.n	800157c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	73fb      	strb	r3, [r7, #15]
      break;
 800154e:	e015      	b.n	800157c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00e      	beq.n	800157a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
      break;
 8001560:	e00b      	b.n	800157a <DMA_CheckFifoParam+0xe6>
      break;
 8001562:	bf00      	nop
 8001564:	e00a      	b.n	800157c <DMA_CheckFifoParam+0xe8>
      break;
 8001566:	bf00      	nop
 8001568:	e008      	b.n	800157c <DMA_CheckFifoParam+0xe8>
      break;
 800156a:	bf00      	nop
 800156c:	e006      	b.n	800157c <DMA_CheckFifoParam+0xe8>
      break;
 800156e:	bf00      	nop
 8001570:	e004      	b.n	800157c <DMA_CheckFifoParam+0xe8>
      break;
 8001572:	bf00      	nop
 8001574:	e002      	b.n	800157c <DMA_CheckFifoParam+0xe8>
      break;   
 8001576:	bf00      	nop
 8001578:	e000      	b.n	800157c <DMA_CheckFifoParam+0xe8>
      break;
 800157a:	bf00      	nop
    }
  } 
  
  return status; 
 800157c:	7bfb      	ldrb	r3, [r7, #15]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop

0800158c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
 80015a6:	e159      	b.n	800185c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015a8:	2201      	movs	r2, #1
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	f040 8148 	bne.w	8001856 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d005      	beq.n	80015de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d130      	bne.n	8001640 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001614:	2201      	movs	r2, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 0201 	and.w	r2, r3, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b03      	cmp	r3, #3
 800164a:	d017      	beq.n	800167c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d123      	bne.n	80016d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	08da      	lsrs	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3208      	adds	r2, #8
 8001690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	69b9      	ldr	r1, [r7, #24]
 80016cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0203 	and.w	r2, r3, #3
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80a2 	beq.w	8001856 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b57      	ldr	r3, [pc, #348]	; (8001874 <HAL_GPIO_Init+0x2e8>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	4a56      	ldr	r2, [pc, #344]	; (8001874 <HAL_GPIO_Init+0x2e8>)
 800171c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001720:	6453      	str	r3, [r2, #68]	; 0x44
 8001722:	4b54      	ldr	r3, [pc, #336]	; (8001874 <HAL_GPIO_Init+0x2e8>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800172e:	4a52      	ldr	r2, [pc, #328]	; (8001878 <HAL_GPIO_Init+0x2ec>)
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	3302      	adds	r3, #2
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	220f      	movs	r2, #15
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a49      	ldr	r2, [pc, #292]	; (800187c <HAL_GPIO_Init+0x2f0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d019      	beq.n	800178e <HAL_GPIO_Init+0x202>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a48      	ldr	r2, [pc, #288]	; (8001880 <HAL_GPIO_Init+0x2f4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d013      	beq.n	800178a <HAL_GPIO_Init+0x1fe>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a47      	ldr	r2, [pc, #284]	; (8001884 <HAL_GPIO_Init+0x2f8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00d      	beq.n	8001786 <HAL_GPIO_Init+0x1fa>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a46      	ldr	r2, [pc, #280]	; (8001888 <HAL_GPIO_Init+0x2fc>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d007      	beq.n	8001782 <HAL_GPIO_Init+0x1f6>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a45      	ldr	r2, [pc, #276]	; (800188c <HAL_GPIO_Init+0x300>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d101      	bne.n	800177e <HAL_GPIO_Init+0x1f2>
 800177a:	2304      	movs	r3, #4
 800177c:	e008      	b.n	8001790 <HAL_GPIO_Init+0x204>
 800177e:	2307      	movs	r3, #7
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x204>
 8001782:	2303      	movs	r3, #3
 8001784:	e004      	b.n	8001790 <HAL_GPIO_Init+0x204>
 8001786:	2302      	movs	r3, #2
 8001788:	e002      	b.n	8001790 <HAL_GPIO_Init+0x204>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_GPIO_Init+0x204>
 800178e:	2300      	movs	r3, #0
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	f002 0203 	and.w	r2, r2, #3
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	4093      	lsls	r3, r2
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a0:	4935      	ldr	r1, [pc, #212]	; (8001878 <HAL_GPIO_Init+0x2ec>)
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ae:	4b38      	ldr	r3, [pc, #224]	; (8001890 <HAL_GPIO_Init+0x304>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d2:	4a2f      	ldr	r2, [pc, #188]	; (8001890 <HAL_GPIO_Init+0x304>)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017d8:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <HAL_GPIO_Init+0x304>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017fc:	4a24      	ldr	r2, [pc, #144]	; (8001890 <HAL_GPIO_Init+0x304>)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001802:	4b23      	ldr	r3, [pc, #140]	; (8001890 <HAL_GPIO_Init+0x304>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001826:	4a1a      	ldr	r2, [pc, #104]	; (8001890 <HAL_GPIO_Init+0x304>)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_GPIO_Init+0x304>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001850:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <HAL_GPIO_Init+0x304>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3301      	adds	r3, #1
 800185a:	61fb      	str	r3, [r7, #28]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	2b0f      	cmp	r3, #15
 8001860:	f67f aea2 	bls.w	80015a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	40013800 	.word	0x40013800
 800187c:	40020000 	.word	0x40020000
 8001880:	40020400 	.word	0x40020400
 8001884:	40020800 	.word	0x40020800
 8001888:	40020c00 	.word	0x40020c00
 800188c:	40021000 	.word	0x40021000
 8001890:	40013c00 	.word	0x40013c00

08001894 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e128      	b.n	8001af8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a90      	ldr	r2, [pc, #576]	; (8001b00 <HAL_I2S_Init+0x26c>)
 80018be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7fe ffe9 	bl	8000898 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2202      	movs	r2, #2
 80018ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80018dc:	f023 030f 	bic.w	r3, r3, #15
 80018e0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2202      	movs	r2, #2
 80018e8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d060      	beq.n	80019b4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d102      	bne.n	8001900 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80018fa:	2310      	movs	r3, #16
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	e001      	b.n	8001904 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001900:	2320      	movs	r3, #32
 8001902:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b20      	cmp	r3, #32
 800190a:	d802      	bhi.n	8001912 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001912:	2001      	movs	r0, #1
 8001914:	f001 fa9c 	bl	8002e50 <HAL_RCCEx_GetPeriphCLKFreq>
 8001918:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001922:	d125      	bne.n	8001970 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d010      	beq.n	800194e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	fbb2 f2f3 	udiv	r2, r2, r3
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	461a      	mov	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	fbb2 f3f3 	udiv	r3, r2, r3
 8001948:	3305      	adds	r3, #5
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	e01f      	b.n	800198e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	fbb2 f2f3 	udiv	r2, r2, r3
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	461a      	mov	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	fbb2 f3f3 	udiv	r3, r2, r3
 800196a:	3305      	adds	r3, #5
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	e00e      	b.n	800198e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	fbb2 f2f3 	udiv	r2, r2, r3
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	461a      	mov	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	fbb2 f3f3 	udiv	r3, r2, r3
 800198a:	3305      	adds	r3, #5
 800198c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4a5c      	ldr	r2, [pc, #368]	; (8001b04 <HAL_I2S_Init+0x270>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	08db      	lsrs	r3, r3, #3
 8001998:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	085b      	lsrs	r3, r3, #1
 80019aa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	61bb      	str	r3, [r7, #24]
 80019b2:	e003      	b.n	80019bc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80019b4:	2302      	movs	r3, #2
 80019b6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d902      	bls.n	80019c8 <HAL_I2S_Init+0x134>
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	2bff      	cmp	r3, #255	; 0xff
 80019c6:	d907      	bls.n	80019d8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	f043 0210 	orr.w	r2, r3, #16
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e08f      	b.n	8001af8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	ea42 0103 	orr.w	r1, r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80019f6:	f023 030f 	bic.w	r3, r3, #15
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6851      	ldr	r1, [r2, #4]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6892      	ldr	r2, [r2, #8]
 8001a02:	4311      	orrs	r1, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	68d2      	ldr	r2, [r2, #12]
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6992      	ldr	r2, [r2, #24]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a1a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d161      	bne.n	8001ae8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a38      	ldr	r2, [pc, #224]	; (8001b08 <HAL_I2S_Init+0x274>)
 8001a28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a37      	ldr	r2, [pc, #220]	; (8001b0c <HAL_I2S_Init+0x278>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d101      	bne.n	8001a38 <HAL_I2S_Init+0x1a4>
 8001a34:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <HAL_I2S_Init+0x27c>)
 8001a36:	e001      	b.n	8001a3c <HAL_I2S_Init+0x1a8>
 8001a38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	4932      	ldr	r1, [pc, #200]	; (8001b0c <HAL_I2S_Init+0x278>)
 8001a44:	428a      	cmp	r2, r1
 8001a46:	d101      	bne.n	8001a4c <HAL_I2S_Init+0x1b8>
 8001a48:	4a31      	ldr	r2, [pc, #196]	; (8001b10 <HAL_I2S_Init+0x27c>)
 8001a4a:	e001      	b.n	8001a50 <HAL_I2S_Init+0x1bc>
 8001a4c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a50:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a54:	f023 030f 	bic.w	r3, r3, #15
 8001a58:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a2b      	ldr	r2, [pc, #172]	; (8001b0c <HAL_I2S_Init+0x278>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d101      	bne.n	8001a68 <HAL_I2S_Init+0x1d4>
 8001a64:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <HAL_I2S_Init+0x27c>)
 8001a66:	e001      	b.n	8001a6c <HAL_I2S_Init+0x1d8>
 8001a68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a25      	ldr	r2, [pc, #148]	; (8001b0c <HAL_I2S_Init+0x278>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d101      	bne.n	8001a7e <HAL_I2S_Init+0x1ea>
 8001a7a:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <HAL_I2S_Init+0x27c>)
 8001a7c:	e001      	b.n	8001a82 <HAL_I2S_Init+0x1ee>
 8001a7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a8e:	d003      	beq.n	8001a98 <HAL_I2S_Init+0x204>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d103      	bne.n	8001aa0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	e001      	b.n	8001aa4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	897b      	ldrh	r3, [r7, #10]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ad0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <HAL_I2S_Init+0x278>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d101      	bne.n	8001ae0 <HAL_I2S_Init+0x24c>
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <HAL_I2S_Init+0x27c>)
 8001ade:	e001      	b.n	8001ae4 <HAL_I2S_Init+0x250>
 8001ae0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ae4:	897a      	ldrh	r2, [r7, #10]
 8001ae6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3720      	adds	r7, #32
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	08001e19 	.word	0x08001e19
 8001b04:	cccccccd 	.word	0xcccccccd
 8001b08:	08001f2d 	.word	0x08001f2d
 8001b0c:	40003800 	.word	0x40003800
 8001b10:	40003400 	.word	0x40003400

08001b14 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d002      	beq.n	8001b2e <HAL_I2S_Receive_DMA+0x1a>
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0a1      	b.n	8001c76 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_I2S_Receive_DMA+0x2e>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e099      	b.n	8001c76 <HAL_I2S_Receive_DMA+0x162>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d005      	beq.n	8001b62 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e089      	b.n	8001c76 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2204      	movs	r2, #4
 8001b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d002      	beq.n	8001b8e <HAL_I2S_Receive_DMA+0x7a>
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	2b05      	cmp	r3, #5
 8001b8c:	d10a      	bne.n	8001ba4 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	865a      	strh	r2, [r3, #50]	; 0x32
 8001ba2:	e005      	b.n	8001bb0 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	88fa      	ldrh	r2, [r7, #6]
 8001ba8:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	88fa      	ldrh	r2, [r7, #6]
 8001bae:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb4:	4a32      	ldr	r2, [pc, #200]	; (8001c80 <HAL_I2S_Receive_DMA+0x16c>)
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbc:	4a31      	ldr	r2, [pc, #196]	; (8001c84 <HAL_I2S_Receive_DMA+0x170>)
 8001bbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc4:	4a30      	ldr	r2, [pc, #192]	; (8001c88 <HAL_I2S_Receive_DMA+0x174>)
 8001bc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001bd6:	d10a      	bne.n	8001bee <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001bd8:	2300      	movs	r3, #0
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	330c      	adds	r3, #12
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001c04:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001c06:	f7ff f9ff 	bl	8001008 <HAL_DMA_Start_IT>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00f      	beq.n	8001c30 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c14:	f043 0208 	orr.w	r2, r3, #8
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e022      	b.n	8001c76 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d107      	bne.n	8001c4e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	69da      	ldr	r2, [r3, #28]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c4c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d107      	bne.n	8001c6c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	08001cf7 	.word	0x08001cf7
 8001c84:	08001cb5 	.word	0x08001cb5
 8001c88:	08001d13 	.word	0x08001d13

08001c8c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10e      	bne.n	8001ce8 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f7fe fd65 	bl	80007b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f7fe fd81 	bl	800080c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0203 	bic.w	r2, r2, #3
 8001d2e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d48:	f043 0208 	orr.w	r2, r3, #8
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f7ff ffa5 	bl	8001ca0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	881a      	ldrh	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	1c9a      	adds	r2, r3, #2
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	3b01      	subs	r3, #1
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10e      	bne.n	8001db2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001da2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff6d 	bl	8001c8c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	b292      	uxth	r2, r2
 8001dce:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	1c9a      	adds	r2, r3, #2
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10e      	bne.n	8001e10 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e00:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7fe fcd4 	bl	80007b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d13a      	bne.n	8001eaa <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d109      	bne.n	8001e52 <I2S_IRQHandler+0x3a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e48:	2b40      	cmp	r3, #64	; 0x40
 8001e4a:	d102      	bne.n	8001e52 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ffb4 	bl	8001dba <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e58:	2b40      	cmp	r3, #64	; 0x40
 8001e5a:	d126      	bne.n	8001eaa <I2S_IRQHandler+0x92>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b20      	cmp	r3, #32
 8001e68:	d11f      	bne.n	8001eaa <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e78:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9c:	f043 0202 	orr.w	r2, r3, #2
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff fefb 	bl	8001ca0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d136      	bne.n	8001f24 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d109      	bne.n	8001ed4 <I2S_IRQHandler+0xbc>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eca:	2b80      	cmp	r3, #128	; 0x80
 8001ecc:	d102      	bne.n	8001ed4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff ff45 	bl	8001d5e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d122      	bne.n	8001f24 <I2S_IRQHandler+0x10c>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b20      	cmp	r3, #32
 8001eea:	d11b      	bne.n	8001f24 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001efa:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f043 0204 	orr.w	r2, r3, #4
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff febe 	bl	8001ca0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f24:	bf00      	nop
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4aa2      	ldr	r2, [pc, #648]	; (80021cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d101      	bne.n	8001f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001f46:	4ba2      	ldr	r3, [pc, #648]	; (80021d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f48:	e001      	b.n	8001f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001f4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a9b      	ldr	r2, [pc, #620]	; (80021cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d101      	bne.n	8001f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001f64:	4b9a      	ldr	r3, [pc, #616]	; (80021d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f66:	e001      	b.n	8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001f68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f78:	d004      	beq.n	8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f040 8099 	bne.w	80020b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d107      	bne.n	8001f9e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d002      	beq.n	8001f9e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f925 	bl	80021e8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d107      	bne.n	8001fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f9c8 	bl	8002348 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fbe:	2b40      	cmp	r3, #64	; 0x40
 8001fc0:	d13a      	bne.n	8002038 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d035      	beq.n	8002038 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a7e      	ldr	r2, [pc, #504]	; (80021cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d101      	bne.n	8001fda <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001fd6:	4b7e      	ldr	r3, [pc, #504]	; (80021d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001fd8:	e001      	b.n	8001fde <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001fda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4979      	ldr	r1, [pc, #484]	; (80021cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001fe6:	428b      	cmp	r3, r1
 8001fe8:	d101      	bne.n	8001fee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001fea:	4b79      	ldr	r3, [pc, #484]	; (80021d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001fec:	e001      	b.n	8001ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001fee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ff2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ff6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002006:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	f043 0202 	orr.w	r2, r3, #2
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff fe34 	bl	8001ca0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b08      	cmp	r3, #8
 8002040:	f040 80be 	bne.w	80021c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 80b8 	beq.w	80021c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800205e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a59      	ldr	r2, [pc, #356]	; (80021cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800206a:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800206c:	e001      	b.n	8002072 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800206e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4954      	ldr	r1, [pc, #336]	; (80021cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800207a:	428b      	cmp	r3, r1
 800207c:	d101      	bne.n	8002082 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800207e:	4b54      	ldr	r3, [pc, #336]	; (80021d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002080:	e001      	b.n	8002086 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002082:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002086:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800208a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800208c:	2300      	movs	r3, #0
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f043 0204 	orr.w	r2, r3, #4
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff fdf6 	bl	8001ca0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020b4:	e084      	b.n	80021c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d107      	bne.n	80020d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f8be 	bl	800224c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d107      	bne.n	80020ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f8fd 	bl	80022e4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f0:	2b40      	cmp	r3, #64	; 0x40
 80020f2:	d12f      	bne.n	8002154 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d02a      	beq.n	8002154 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800210c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a2e      	ldr	r2, [pc, #184]	; (80021cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d101      	bne.n	800211c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002118:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800211a:	e001      	b.n	8002120 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800211c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4929      	ldr	r1, [pc, #164]	; (80021cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002128:	428b      	cmp	r3, r1
 800212a:	d101      	bne.n	8002130 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800212c:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800212e:	e001      	b.n	8002134 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002130:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002134:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002138:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f043 0202 	orr.w	r2, r3, #2
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff fda6 	bl	8001ca0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b08      	cmp	r3, #8
 800215c:	d131      	bne.n	80021c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	f003 0320 	and.w	r3, r3, #32
 8002164:	2b00      	cmp	r3, #0
 8002166:	d02c      	beq.n	80021c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a17      	ldr	r2, [pc, #92]	; (80021cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d101      	bne.n	8002176 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002172:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002174:	e001      	b.n	800217a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002176:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4912      	ldr	r1, [pc, #72]	; (80021cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002182:	428b      	cmp	r3, r1
 8002184:	d101      	bne.n	800218a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002188:	e001      	b.n	800218e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800218a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800218e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002192:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021a2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b0:	f043 0204 	orr.w	r2, r3, #4
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff fd71 	bl	8001ca0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021be:	e000      	b.n	80021c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80021c0:	bf00      	nop
}
 80021c2:	bf00      	nop
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40003800 	.word	0x40003800
 80021d0:	40003400 	.word	0x40003400

080021d4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	1c99      	adds	r1, r3, #2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6251      	str	r1, [r2, #36]	; 0x24
 80021fa:	881a      	ldrh	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002206:	b29b      	uxth	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d113      	bne.n	8002242 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002228:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800222e:	b29b      	uxth	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d106      	bne.n	8002242 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ffc9 	bl	80021d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	1c99      	adds	r1, r3, #2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6251      	str	r1, [r2, #36]	; 0x24
 800225e:	8819      	ldrh	r1, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <I2SEx_TxISR_I2SExt+0x90>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <I2SEx_TxISR_I2SExt+0x22>
 800226a:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <I2SEx_TxISR_I2SExt+0x94>)
 800226c:	e001      	b.n	8002272 <I2SEx_TxISR_I2SExt+0x26>
 800226e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002272:	460a      	mov	r2, r1
 8002274:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002288:	b29b      	uxth	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d121      	bne.n	80022d2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a12      	ldr	r2, [pc, #72]	; (80022dc <I2SEx_TxISR_I2SExt+0x90>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d101      	bne.n	800229c <I2SEx_TxISR_I2SExt+0x50>
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <I2SEx_TxISR_I2SExt+0x94>)
 800229a:	e001      	b.n	80022a0 <I2SEx_TxISR_I2SExt+0x54>
 800229c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	490d      	ldr	r1, [pc, #52]	; (80022dc <I2SEx_TxISR_I2SExt+0x90>)
 80022a8:	428b      	cmp	r3, r1
 80022aa:	d101      	bne.n	80022b0 <I2SEx_TxISR_I2SExt+0x64>
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <I2SEx_TxISR_I2SExt+0x94>)
 80022ae:	e001      	b.n	80022b4 <I2SEx_TxISR_I2SExt+0x68>
 80022b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d106      	bne.n	80022d2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff81 	bl	80021d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40003800 	.word	0x40003800
 80022e0:	40003400 	.word	0x40003400

080022e4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68d8      	ldr	r0, [r3, #12]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	1c99      	adds	r1, r3, #2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80022fc:	b282      	uxth	r2, r0
 80022fe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002304:	b29b      	uxth	r3, r3
 8002306:	3b01      	subs	r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002312:	b29b      	uxth	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d113      	bne.n	8002340 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002326:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232c:	b29b      	uxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ff4a 	bl	80021d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a20      	ldr	r2, [pc, #128]	; (80023d8 <I2SEx_RxISR_I2SExt+0x90>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <I2SEx_RxISR_I2SExt+0x16>
 800235a:	4b20      	ldr	r3, [pc, #128]	; (80023dc <I2SEx_RxISR_I2SExt+0x94>)
 800235c:	e001      	b.n	8002362 <I2SEx_RxISR_I2SExt+0x1a>
 800235e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002362:	68d8      	ldr	r0, [r3, #12]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	1c99      	adds	r1, r3, #2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800236e:	b282      	uxth	r2, r0
 8002370:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d121      	bne.n	80023ce <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <I2SEx_RxISR_I2SExt+0x90>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d101      	bne.n	8002398 <I2SEx_RxISR_I2SExt+0x50>
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <I2SEx_RxISR_I2SExt+0x94>)
 8002396:	e001      	b.n	800239c <I2SEx_RxISR_I2SExt+0x54>
 8002398:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	490d      	ldr	r1, [pc, #52]	; (80023d8 <I2SEx_RxISR_I2SExt+0x90>)
 80023a4:	428b      	cmp	r3, r1
 80023a6:	d101      	bne.n	80023ac <I2SEx_RxISR_I2SExt+0x64>
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <I2SEx_RxISR_I2SExt+0x94>)
 80023aa:	e001      	b.n	80023b0 <I2SEx_RxISR_I2SExt+0x68>
 80023ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023b4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d106      	bne.n	80023ce <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ff03 	bl	80021d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40003800 	.word	0x40003800
 80023dc:	40003400 	.word	0x40003400

080023e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e264      	b.n	80028bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d075      	beq.n	80024ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023fe:	4ba3      	ldr	r3, [pc, #652]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b04      	cmp	r3, #4
 8002408:	d00c      	beq.n	8002424 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240a:	4ba0      	ldr	r3, [pc, #640]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002412:	2b08      	cmp	r3, #8
 8002414:	d112      	bne.n	800243c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002416:	4b9d      	ldr	r3, [pc, #628]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002422:	d10b      	bne.n	800243c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002424:	4b99      	ldr	r3, [pc, #612]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d05b      	beq.n	80024e8 <HAL_RCC_OscConfig+0x108>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d157      	bne.n	80024e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e23f      	b.n	80028bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002444:	d106      	bne.n	8002454 <HAL_RCC_OscConfig+0x74>
 8002446:	4b91      	ldr	r3, [pc, #580]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a90      	ldr	r2, [pc, #576]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e01d      	b.n	8002490 <HAL_RCC_OscConfig+0xb0>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x98>
 800245e:	4b8b      	ldr	r3, [pc, #556]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a8a      	ldr	r2, [pc, #552]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 8002464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b88      	ldr	r3, [pc, #544]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a87      	ldr	r2, [pc, #540]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 8002470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0xb0>
 8002478:	4b84      	ldr	r3, [pc, #528]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a83      	ldr	r2, [pc, #524]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 800247e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b81      	ldr	r3, [pc, #516]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a80      	ldr	r2, [pc, #512]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 800248a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d013      	beq.n	80024c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe fbea 	bl	8000c70 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a0:	f7fe fbe6 	bl	8000c70 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e204      	b.n	80028bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	4b76      	ldr	r3, [pc, #472]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0xc0>
 80024be:	e014      	b.n	80024ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe fbd6 	bl	8000c70 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c8:	f7fe fbd2 	bl	8000c70 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e1f0      	b.n	80028bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	4b6c      	ldr	r3, [pc, #432]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0xe8>
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d063      	beq.n	80025be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024f6:	4b65      	ldr	r3, [pc, #404]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002502:	4b62      	ldr	r3, [pc, #392]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800250a:	2b08      	cmp	r3, #8
 800250c:	d11c      	bne.n	8002548 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250e:	4b5f      	ldr	r3, [pc, #380]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d116      	bne.n	8002548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251a:	4b5c      	ldr	r3, [pc, #368]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <HAL_RCC_OscConfig+0x152>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d001      	beq.n	8002532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e1c4      	b.n	80028bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002532:	4b56      	ldr	r3, [pc, #344]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4952      	ldr	r1, [pc, #328]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002546:	e03a      	b.n	80025be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d020      	beq.n	8002592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002550:	4b4f      	ldr	r3, [pc, #316]	; (8002690 <HAL_RCC_OscConfig+0x2b0>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7fe fb8b 	bl	8000c70 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800255e:	f7fe fb87 	bl	8000c70 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e1a5      	b.n	80028bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002570:	4b46      	ldr	r3, [pc, #280]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257c:	4b43      	ldr	r3, [pc, #268]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4940      	ldr	r1, [pc, #256]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]
 8002590:	e015      	b.n	80025be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002592:	4b3f      	ldr	r3, [pc, #252]	; (8002690 <HAL_RCC_OscConfig+0x2b0>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7fe fb6a 	bl	8000c70 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a0:	f7fe fb66 	bl	8000c70 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e184      	b.n	80028bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	4b36      	ldr	r3, [pc, #216]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d030      	beq.n	800262c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d016      	beq.n	8002600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d2:	4b30      	ldr	r3, [pc, #192]	; (8002694 <HAL_RCC_OscConfig+0x2b4>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d8:	f7fe fb4a 	bl	8000c70 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e0:	f7fe fb46 	bl	8000c70 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e164      	b.n	80028bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	4b26      	ldr	r3, [pc, #152]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x200>
 80025fe:	e015      	b.n	800262c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002600:	4b24      	ldr	r3, [pc, #144]	; (8002694 <HAL_RCC_OscConfig+0x2b4>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002606:	f7fe fb33 	bl	8000c70 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800260e:	f7fe fb2f 	bl	8000c70 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e14d      	b.n	80028bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002620:	4b1a      	ldr	r3, [pc, #104]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 8002622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f0      	bne.n	800260e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80a0 	beq.w	800277a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263e:	4b13      	ldr	r3, [pc, #76]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10f      	bne.n	800266a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	4b0f      	ldr	r3, [pc, #60]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	4a0e      	ldr	r2, [pc, #56]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 8002654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002658:	6413      	str	r3, [r2, #64]	; 0x40
 800265a:	4b0c      	ldr	r3, [pc, #48]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002666:	2301      	movs	r3, #1
 8002668:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_OscConfig+0x2b8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002672:	2b00      	cmp	r3, #0
 8002674:	d121      	bne.n	80026ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002676:	4b08      	ldr	r3, [pc, #32]	; (8002698 <HAL_RCC_OscConfig+0x2b8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a07      	ldr	r2, [pc, #28]	; (8002698 <HAL_RCC_OscConfig+0x2b8>)
 800267c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002682:	f7fe faf5 	bl	8000c70 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002688:	e011      	b.n	80026ae <HAL_RCC_OscConfig+0x2ce>
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800
 8002690:	42470000 	.word	0x42470000
 8002694:	42470e80 	.word	0x42470e80
 8002698:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269c:	f7fe fae8 	bl	8000c70 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e106      	b.n	80028bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ae:	4b85      	ldr	r3, [pc, #532]	; (80028c4 <HAL_RCC_OscConfig+0x4e4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d106      	bne.n	80026d0 <HAL_RCC_OscConfig+0x2f0>
 80026c2:	4b81      	ldr	r3, [pc, #516]	; (80028c8 <HAL_RCC_OscConfig+0x4e8>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	4a80      	ldr	r2, [pc, #512]	; (80028c8 <HAL_RCC_OscConfig+0x4e8>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6713      	str	r3, [r2, #112]	; 0x70
 80026ce:	e01c      	b.n	800270a <HAL_RCC_OscConfig+0x32a>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b05      	cmp	r3, #5
 80026d6:	d10c      	bne.n	80026f2 <HAL_RCC_OscConfig+0x312>
 80026d8:	4b7b      	ldr	r3, [pc, #492]	; (80028c8 <HAL_RCC_OscConfig+0x4e8>)
 80026da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026dc:	4a7a      	ldr	r2, [pc, #488]	; (80028c8 <HAL_RCC_OscConfig+0x4e8>)
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	6713      	str	r3, [r2, #112]	; 0x70
 80026e4:	4b78      	ldr	r3, [pc, #480]	; (80028c8 <HAL_RCC_OscConfig+0x4e8>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	4a77      	ldr	r2, [pc, #476]	; (80028c8 <HAL_RCC_OscConfig+0x4e8>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6713      	str	r3, [r2, #112]	; 0x70
 80026f0:	e00b      	b.n	800270a <HAL_RCC_OscConfig+0x32a>
 80026f2:	4b75      	ldr	r3, [pc, #468]	; (80028c8 <HAL_RCC_OscConfig+0x4e8>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	4a74      	ldr	r2, [pc, #464]	; (80028c8 <HAL_RCC_OscConfig+0x4e8>)
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	6713      	str	r3, [r2, #112]	; 0x70
 80026fe:	4b72      	ldr	r3, [pc, #456]	; (80028c8 <HAL_RCC_OscConfig+0x4e8>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	4a71      	ldr	r2, [pc, #452]	; (80028c8 <HAL_RCC_OscConfig+0x4e8>)
 8002704:	f023 0304 	bic.w	r3, r3, #4
 8002708:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d015      	beq.n	800273e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002712:	f7fe faad 	bl	8000c70 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002718:	e00a      	b.n	8002730 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800271a:	f7fe faa9 	bl	8000c70 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	f241 3288 	movw	r2, #5000	; 0x1388
 8002728:	4293      	cmp	r3, r2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e0c5      	b.n	80028bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002730:	4b65      	ldr	r3, [pc, #404]	; (80028c8 <HAL_RCC_OscConfig+0x4e8>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0ee      	beq.n	800271a <HAL_RCC_OscConfig+0x33a>
 800273c:	e014      	b.n	8002768 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273e:	f7fe fa97 	bl	8000c70 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7fe fa93 	bl	8000c70 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	; 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e0af      	b.n	80028bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275c:	4b5a      	ldr	r3, [pc, #360]	; (80028c8 <HAL_RCC_OscConfig+0x4e8>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1ee      	bne.n	8002746 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002768:	7dfb      	ldrb	r3, [r7, #23]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d105      	bne.n	800277a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276e:	4b56      	ldr	r3, [pc, #344]	; (80028c8 <HAL_RCC_OscConfig+0x4e8>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a55      	ldr	r2, [pc, #340]	; (80028c8 <HAL_RCC_OscConfig+0x4e8>)
 8002774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 809b 	beq.w	80028ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002784:	4b50      	ldr	r3, [pc, #320]	; (80028c8 <HAL_RCC_OscConfig+0x4e8>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 030c 	and.w	r3, r3, #12
 800278c:	2b08      	cmp	r3, #8
 800278e:	d05c      	beq.n	800284a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d141      	bne.n	800281c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002798:	4b4c      	ldr	r3, [pc, #304]	; (80028cc <HAL_RCC_OscConfig+0x4ec>)
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7fe fa67 	bl	8000c70 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a6:	f7fe fa63 	bl	8000c70 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e081      	b.n	80028bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b8:	4b43      	ldr	r3, [pc, #268]	; (80028c8 <HAL_RCC_OscConfig+0x4e8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f0      	bne.n	80027a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69da      	ldr	r2, [r3, #28]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	019b      	lsls	r3, r3, #6
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	085b      	lsrs	r3, r3, #1
 80027dc:	3b01      	subs	r3, #1
 80027de:	041b      	lsls	r3, r3, #16
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	061b      	lsls	r3, r3, #24
 80027e8:	4937      	ldr	r1, [pc, #220]	; (80028c8 <HAL_RCC_OscConfig+0x4e8>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ee:	4b37      	ldr	r3, [pc, #220]	; (80028cc <HAL_RCC_OscConfig+0x4ec>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fe fa3c 	bl	8000c70 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fc:	f7fe fa38 	bl	8000c70 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e056      	b.n	80028bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280e:	4b2e      	ldr	r3, [pc, #184]	; (80028c8 <HAL_RCC_OscConfig+0x4e8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x41c>
 800281a:	e04e      	b.n	80028ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281c:	4b2b      	ldr	r3, [pc, #172]	; (80028cc <HAL_RCC_OscConfig+0x4ec>)
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002822:	f7fe fa25 	bl	8000c70 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282a:	f7fe fa21 	bl	8000c70 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e03f      	b.n	80028bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283c:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <HAL_RCC_OscConfig+0x4e8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f0      	bne.n	800282a <HAL_RCC_OscConfig+0x44a>
 8002848:	e037      	b.n	80028ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e032      	b.n	80028bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002856:	4b1c      	ldr	r3, [pc, #112]	; (80028c8 <HAL_RCC_OscConfig+0x4e8>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d028      	beq.n	80028b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800286e:	429a      	cmp	r2, r3
 8002870:	d121      	bne.n	80028b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287c:	429a      	cmp	r2, r3
 800287e:	d11a      	bne.n	80028b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002886:	4013      	ands	r3, r2
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800288c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800288e:	4293      	cmp	r3, r2
 8002890:	d111      	bne.n	80028b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	085b      	lsrs	r3, r3, #1
 800289e:	3b01      	subs	r3, #1
 80028a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d001      	beq.n	80028ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40007000 	.word	0x40007000
 80028c8:	40023800 	.word	0x40023800
 80028cc:	42470060 	.word	0x42470060

080028d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0cc      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e4:	4b68      	ldr	r3, [pc, #416]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d90c      	bls.n	800290c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b65      	ldr	r3, [pc, #404]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b63      	ldr	r3, [pc, #396]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0b8      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002924:	4b59      	ldr	r3, [pc, #356]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4a58      	ldr	r2, [pc, #352]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800292e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800293c:	4b53      	ldr	r3, [pc, #332]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a52      	ldr	r2, [pc, #328]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002948:	4b50      	ldr	r3, [pc, #320]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	494d      	ldr	r1, [pc, #308]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d044      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d107      	bne.n	800297e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296e:	4b47      	ldr	r3, [pc, #284]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d119      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e07f      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d003      	beq.n	800298e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298a:	2b03      	cmp	r3, #3
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298e:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e06f      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299e:	4b3b      	ldr	r3, [pc, #236]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e067      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ae:	4b37      	ldr	r3, [pc, #220]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4934      	ldr	r1, [pc, #208]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c0:	f7fe f956 	bl	8000c70 <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	e00a      	b.n	80029de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c8:	f7fe f952 	bl	8000c70 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e04f      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	4b2b      	ldr	r3, [pc, #172]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 020c 	and.w	r2, r3, #12
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d1eb      	bne.n	80029c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029f0:	4b25      	ldr	r3, [pc, #148]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d20c      	bcs.n	8002a18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b20      	ldr	r3, [pc, #128]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e032      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4916      	ldr	r1, [pc, #88]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d009      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	490e      	ldr	r1, [pc, #56]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a56:	f000 f821 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	490a      	ldr	r1, [pc, #40]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 8002a68:	5ccb      	ldrb	r3, [r1, r3]
 8002a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6e:	4a09      	ldr	r2, [pc, #36]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe f8b6 	bl	8000be8 <HAL_InitTick>

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023c00 	.word	0x40023c00
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	08003e1c 	.word	0x08003e1c
 8002a94:	20000000 	.word	0x20000000
 8002a98:	20000004 	.word	0x20000004

08002a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a9c:	b5b0      	push	{r4, r5, r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	6079      	str	r1, [r7, #4]
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	60f9      	str	r1, [r7, #12]
 8002aaa:	2100      	movs	r1, #0
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002aae:	2100      	movs	r1, #0
 8002ab0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ab2:	4952      	ldr	r1, [pc, #328]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x160>)
 8002ab4:	6889      	ldr	r1, [r1, #8]
 8002ab6:	f001 010c 	and.w	r1, r1, #12
 8002aba:	2908      	cmp	r1, #8
 8002abc:	d00d      	beq.n	8002ada <HAL_RCC_GetSysClockFreq+0x3e>
 8002abe:	2908      	cmp	r1, #8
 8002ac0:	f200 8094 	bhi.w	8002bec <HAL_RCC_GetSysClockFreq+0x150>
 8002ac4:	2900      	cmp	r1, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_RCC_GetSysClockFreq+0x32>
 8002ac8:	2904      	cmp	r1, #4
 8002aca:	d003      	beq.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x38>
 8002acc:	e08e      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ace:	4b4c      	ldr	r3, [pc, #304]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x164>)
 8002ad0:	60bb      	str	r3, [r7, #8]
       break;
 8002ad2:	e08e      	b.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ad4:	4b4b      	ldr	r3, [pc, #300]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x168>)
 8002ad6:	60bb      	str	r3, [r7, #8]
      break;
 8002ad8:	e08b      	b.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ada:	4948      	ldr	r1, [pc, #288]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x160>)
 8002adc:	6849      	ldr	r1, [r1, #4]
 8002ade:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002ae2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ae4:	4945      	ldr	r1, [pc, #276]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x160>)
 8002ae6:	6849      	ldr	r1, [r1, #4]
 8002ae8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002aec:	2900      	cmp	r1, #0
 8002aee:	d024      	beq.n	8002b3a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af0:	4942      	ldr	r1, [pc, #264]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x160>)
 8002af2:	6849      	ldr	r1, [r1, #4]
 8002af4:	0989      	lsrs	r1, r1, #6
 8002af6:	4608      	mov	r0, r1
 8002af8:	f04f 0100 	mov.w	r1, #0
 8002afc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002b00:	f04f 0500 	mov.w	r5, #0
 8002b04:	ea00 0204 	and.w	r2, r0, r4
 8002b08:	ea01 0305 	and.w	r3, r1, r5
 8002b0c:	493d      	ldr	r1, [pc, #244]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x168>)
 8002b0e:	fb01 f003 	mul.w	r0, r1, r3
 8002b12:	2100      	movs	r1, #0
 8002b14:	fb01 f102 	mul.w	r1, r1, r2
 8002b18:	1844      	adds	r4, r0, r1
 8002b1a:	493a      	ldr	r1, [pc, #232]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x168>)
 8002b1c:	fba2 0101 	umull	r0, r1, r2, r1
 8002b20:	1863      	adds	r3, r4, r1
 8002b22:	4619      	mov	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	461a      	mov	r2, r3
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	f7fd fbb0 	bl	8000290 <__aeabi_uldivmod>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4613      	mov	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	e04a      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3a:	4b30      	ldr	r3, [pc, #192]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x160>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	099b      	lsrs	r3, r3, #6
 8002b40:	461a      	mov	r2, r3
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b4a:	f04f 0100 	mov.w	r1, #0
 8002b4e:	ea02 0400 	and.w	r4, r2, r0
 8002b52:	ea03 0501 	and.w	r5, r3, r1
 8002b56:	4620      	mov	r0, r4
 8002b58:	4629      	mov	r1, r5
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	014b      	lsls	r3, r1, #5
 8002b64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b68:	0142      	lsls	r2, r0, #5
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	1b00      	subs	r0, r0, r4
 8002b70:	eb61 0105 	sbc.w	r1, r1, r5
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	018b      	lsls	r3, r1, #6
 8002b7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b82:	0182      	lsls	r2, r0, #6
 8002b84:	1a12      	subs	r2, r2, r0
 8002b86:	eb63 0301 	sbc.w	r3, r3, r1
 8002b8a:	f04f 0000 	mov.w	r0, #0
 8002b8e:	f04f 0100 	mov.w	r1, #0
 8002b92:	00d9      	lsls	r1, r3, #3
 8002b94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b98:	00d0      	lsls	r0, r2, #3
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	1912      	adds	r2, r2, r4
 8002ba0:	eb45 0303 	adc.w	r3, r5, r3
 8002ba4:	f04f 0000 	mov.w	r0, #0
 8002ba8:	f04f 0100 	mov.w	r1, #0
 8002bac:	0299      	lsls	r1, r3, #10
 8002bae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002bb2:	0290      	lsls	r0, r2, #10
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	f7fd fb64 	bl	8000290 <__aeabi_uldivmod>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4613      	mov	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x160>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	0c1b      	lsrs	r3, r3, #16
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	3301      	adds	r3, #1
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be8:	60bb      	str	r3, [r7, #8]
      break;
 8002bea:	e002      	b.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bec:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x164>)
 8002bee:	60bb      	str	r3, [r7, #8]
      break;
 8002bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	00f42400 	.word	0x00f42400
 8002c04:	017d7840 	.word	0x017d7840

08002c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c0c:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	20000000 	.word	0x20000000

08002c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c24:	f7ff fff0 	bl	8002c08 <HAL_RCC_GetHCLKFreq>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	0a9b      	lsrs	r3, r3, #10
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	4903      	ldr	r1, [pc, #12]	; (8002c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c36:	5ccb      	ldrb	r3, [r1, r3]
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40023800 	.word	0x40023800
 8002c44:	08003e2c 	.word	0x08003e2c

08002c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c4c:	f7ff ffdc 	bl	8002c08 <HAL_RCC_GetHCLKFreq>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	0b5b      	lsrs	r3, r3, #13
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	4903      	ldr	r1, [pc, #12]	; (8002c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c5e:	5ccb      	ldrb	r3, [r1, r3]
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	08003e2c 	.word	0x08003e2c

08002c70 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d105      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d038      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c98:	4b68      	ldr	r3, [pc, #416]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c9e:	f7fd ffe7 	bl	8000c70 <HAL_GetTick>
 8002ca2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ca6:	f7fd ffe3 	bl	8000c70 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e0bd      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cb8:	4b61      	ldr	r3, [pc, #388]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1f0      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	019b      	lsls	r3, r3, #6
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	071b      	lsls	r3, r3, #28
 8002cd6:	495a      	ldr	r1, [pc, #360]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cde:	4b57      	ldr	r3, [pc, #348]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ce4:	f7fd ffc4 	bl	8000c70 <HAL_GetTick>
 8002ce8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002cec:	f7fd ffc0 	bl	8000c70 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e09a      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cfe:	4b50      	ldr	r3, [pc, #320]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 8083 	beq.w	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	4b48      	ldr	r3, [pc, #288]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	4a47      	ldr	r2, [pc, #284]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d26:	6413      	str	r3, [r2, #64]	; 0x40
 8002d28:	4b45      	ldr	r3, [pc, #276]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d34:	4b43      	ldr	r3, [pc, #268]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a42      	ldr	r2, [pc, #264]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d40:	f7fd ff96 	bl	8000c70 <HAL_GetTick>
 8002d44:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d48:	f7fd ff92 	bl	8000c70 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e06c      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d5a:	4b3a      	ldr	r3, [pc, #232]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d66:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d02f      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d028      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d84:	4b2e      	ldr	r3, [pc, #184]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d8e:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d94:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d9a:	4a29      	ldr	r2, [pc, #164]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002da0:	4b27      	ldr	r3, [pc, #156]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d114      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002dac:	f7fd ff60 	bl	8000c70 <HAL_GetTick>
 8002db0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db2:	e00a      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db4:	f7fd ff5c 	bl	8000c70 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e034      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dca:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0ee      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002de2:	d10d      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002de4:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df8:	4911      	ldr	r1, [pc, #68]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
 8002dfe:	e005      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002e00:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	4a0e      	ldr	r2, [pc, #56]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e06:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e0a:	6093      	str	r3, [r2, #8]
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e18:	4909      	ldr	r1, [pc, #36]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	7d1a      	ldrb	r2, [r3, #20]
 8002e2e:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002e30:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	42470068 	.word	0x42470068
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40007000 	.word	0x40007000
 8002e48:	42470e40 	.word	0x42470e40
 8002e4c:	424711e0 	.word	0x424711e0

08002e50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d140      	bne.n	8002ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002e6e:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d131      	bne.n	8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002e84:	4b1f      	ldr	r3, [pc, #124]	; (8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002e86:	617b      	str	r3, [r7, #20]
          break;
 8002e88:	e031      	b.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e8a:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e96:	d109      	bne.n	8002eac <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002e98:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ea2:	4a19      	ldr	r2, [pc, #100]	; (8002f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	e008      	b.n	8002ebe <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002eac:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eb6:	4a15      	ldr	r2, [pc, #84]	; (8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebc:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002ebe:	4b10      	ldr	r3, [pc, #64]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	fb02 f303 	mul.w	r3, r2, r3
 8002ed0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed8:	0f1b      	lsrs	r3, r3, #28
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee4:	617b      	str	r3, [r7, #20]
          break;
 8002ee6:	e002      	b.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
          break;
 8002eec:	bf00      	nop
        }
      }
      break;
 8002eee:	bf00      	nop
    }
  }
  return frequency;
 8002ef0:	697b      	ldr	r3, [r7, #20]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	371c      	adds	r7, #28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
 8002f04:	00bb8000 	.word	0x00bb8000
 8002f08:	017d7840 	.word	0x017d7840
 8002f0c:	00f42400 	.word	0x00f42400

08002f10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e03f      	b.n	8002fa2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fd fd46 	bl	80009c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2224      	movs	r2, #36	; 0x24
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f929 	bl	80031ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695a      	ldr	r2, [r3, #20]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b08a      	sub	sp, #40	; 0x28
 8002fae:	af02      	add	r7, sp, #8
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d17c      	bne.n	80030c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <HAL_UART_Transmit+0x2c>
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e075      	b.n	80030c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_UART_Transmit+0x3e>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e06e      	b.n	80030c6 <HAL_UART_Transmit+0x11c>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2221      	movs	r2, #33	; 0x21
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ffe:	f7fd fe37 	bl	8000c70 <HAL_GetTick>
 8003002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	88fa      	ldrh	r2, [r7, #6]
 8003008:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	88fa      	ldrh	r2, [r7, #6]
 800300e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003018:	d108      	bne.n	800302c <HAL_UART_Transmit+0x82>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d104      	bne.n	800302c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	e003      	b.n	8003034 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003030:	2300      	movs	r3, #0
 8003032:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800303c:	e02a      	b.n	8003094 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2200      	movs	r2, #0
 8003046:	2180      	movs	r1, #128	; 0x80
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f840 	bl	80030ce <UART_WaitOnFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e036      	b.n	80030c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10b      	bne.n	8003076 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800306c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	3302      	adds	r3, #2
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	e007      	b.n	8003086 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	781a      	ldrb	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	3301      	adds	r3, #1
 8003084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1cf      	bne.n	800303e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2200      	movs	r2, #0
 80030a6:	2140      	movs	r1, #64	; 0x40
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 f810 	bl	80030ce <UART_WaitOnFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e006      	b.n	80030c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e000      	b.n	80030c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030c4:	2302      	movs	r3, #2
  }
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b090      	sub	sp, #64	; 0x40
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	603b      	str	r3, [r7, #0]
 80030da:	4613      	mov	r3, r2
 80030dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030de:	e050      	b.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e6:	d04c      	beq.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <UART_WaitOnFlagUntilTimeout+0x30>
 80030ee:	f7fd fdbf 	bl	8000c70 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d241      	bcs.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	330c      	adds	r3, #12
 8003104:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	330c      	adds	r3, #12
 800311c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800311e:	637a      	str	r2, [r7, #52]	; 0x34
 8003120:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003126:	e841 2300 	strex	r3, r2, [r1]
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1e5      	bne.n	80030fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3314      	adds	r3, #20
 8003138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	e853 3f00 	ldrex	r3, [r3]
 8003140:	613b      	str	r3, [r7, #16]
   return(result);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	63bb      	str	r3, [r7, #56]	; 0x38
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3314      	adds	r3, #20
 8003150:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003152:	623a      	str	r2, [r7, #32]
 8003154:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003156:	69f9      	ldr	r1, [r7, #28]
 8003158:	6a3a      	ldr	r2, [r7, #32]
 800315a:	e841 2300 	strex	r3, r2, [r1]
 800315e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1e5      	bne.n	8003132 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e00f      	b.n	80031a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4013      	ands	r3, r2
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	429a      	cmp	r2, r3
 8003190:	bf0c      	ite	eq
 8003192:	2301      	moveq	r3, #1
 8003194:	2300      	movne	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	461a      	mov	r2, r3
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	429a      	cmp	r2, r3
 800319e:	d09f      	beq.n	80030e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3740      	adds	r7, #64	; 0x40
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031b0:	b09f      	sub	sp, #124	; 0x7c
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c2:	68d9      	ldr	r1, [r3, #12]
 80031c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	ea40 0301 	orr.w	r3, r0, r1
 80031cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	431a      	orrs	r2, r3
 80031de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80031e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031f0:	f021 010c 	bic.w	r1, r1, #12
 80031f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031fa:	430b      	orrs	r3, r1
 80031fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320a:	6999      	ldr	r1, [r3, #24]
 800320c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	ea40 0301 	orr.w	r3, r0, r1
 8003214:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	4bc5      	ldr	r3, [pc, #788]	; (8003530 <UART_SetConfig+0x384>)
 800321c:	429a      	cmp	r2, r3
 800321e:	d004      	beq.n	800322a <UART_SetConfig+0x7e>
 8003220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4bc3      	ldr	r3, [pc, #780]	; (8003534 <UART_SetConfig+0x388>)
 8003226:	429a      	cmp	r2, r3
 8003228:	d103      	bne.n	8003232 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800322a:	f7ff fd0d 	bl	8002c48 <HAL_RCC_GetPCLK2Freq>
 800322e:	6778      	str	r0, [r7, #116]	; 0x74
 8003230:	e002      	b.n	8003238 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003232:	f7ff fcf5 	bl	8002c20 <HAL_RCC_GetPCLK1Freq>
 8003236:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003240:	f040 80b6 	bne.w	80033b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003244:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003246:	461c      	mov	r4, r3
 8003248:	f04f 0500 	mov.w	r5, #0
 800324c:	4622      	mov	r2, r4
 800324e:	462b      	mov	r3, r5
 8003250:	1891      	adds	r1, r2, r2
 8003252:	6439      	str	r1, [r7, #64]	; 0x40
 8003254:	415b      	adcs	r3, r3
 8003256:	647b      	str	r3, [r7, #68]	; 0x44
 8003258:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800325c:	1912      	adds	r2, r2, r4
 800325e:	eb45 0303 	adc.w	r3, r5, r3
 8003262:	f04f 0000 	mov.w	r0, #0
 8003266:	f04f 0100 	mov.w	r1, #0
 800326a:	00d9      	lsls	r1, r3, #3
 800326c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003270:	00d0      	lsls	r0, r2, #3
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	1911      	adds	r1, r2, r4
 8003278:	6639      	str	r1, [r7, #96]	; 0x60
 800327a:	416b      	adcs	r3, r5
 800327c:	667b      	str	r3, [r7, #100]	; 0x64
 800327e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	461a      	mov	r2, r3
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	1891      	adds	r1, r2, r2
 800328a:	63b9      	str	r1, [r7, #56]	; 0x38
 800328c:	415b      	adcs	r3, r3
 800328e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003294:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003298:	f7fc fffa 	bl	8000290 <__aeabi_uldivmod>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4ba5      	ldr	r3, [pc, #660]	; (8003538 <UART_SetConfig+0x38c>)
 80032a2:	fba3 2302 	umull	r2, r3, r3, r2
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	011e      	lsls	r6, r3, #4
 80032aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ac:	461c      	mov	r4, r3
 80032ae:	f04f 0500 	mov.w	r5, #0
 80032b2:	4622      	mov	r2, r4
 80032b4:	462b      	mov	r3, r5
 80032b6:	1891      	adds	r1, r2, r2
 80032b8:	6339      	str	r1, [r7, #48]	; 0x30
 80032ba:	415b      	adcs	r3, r3
 80032bc:	637b      	str	r3, [r7, #52]	; 0x34
 80032be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80032c2:	1912      	adds	r2, r2, r4
 80032c4:	eb45 0303 	adc.w	r3, r5, r3
 80032c8:	f04f 0000 	mov.w	r0, #0
 80032cc:	f04f 0100 	mov.w	r1, #0
 80032d0:	00d9      	lsls	r1, r3, #3
 80032d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032d6:	00d0      	lsls	r0, r2, #3
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	1911      	adds	r1, r2, r4
 80032de:	65b9      	str	r1, [r7, #88]	; 0x58
 80032e0:	416b      	adcs	r3, r5
 80032e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	461a      	mov	r2, r3
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	1891      	adds	r1, r2, r2
 80032f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80032f2:	415b      	adcs	r3, r3
 80032f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80032fe:	f7fc ffc7 	bl	8000290 <__aeabi_uldivmod>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4b8c      	ldr	r3, [pc, #560]	; (8003538 <UART_SetConfig+0x38c>)
 8003308:	fba3 1302 	umull	r1, r3, r3, r2
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	2164      	movs	r1, #100	; 0x64
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	3332      	adds	r3, #50	; 0x32
 800331a:	4a87      	ldr	r2, [pc, #540]	; (8003538 <UART_SetConfig+0x38c>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	095b      	lsrs	r3, r3, #5
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003328:	441e      	add	r6, r3
 800332a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800332c:	4618      	mov	r0, r3
 800332e:	f04f 0100 	mov.w	r1, #0
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	1894      	adds	r4, r2, r2
 8003338:	623c      	str	r4, [r7, #32]
 800333a:	415b      	adcs	r3, r3
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
 800333e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003342:	1812      	adds	r2, r2, r0
 8003344:	eb41 0303 	adc.w	r3, r1, r3
 8003348:	f04f 0400 	mov.w	r4, #0
 800334c:	f04f 0500 	mov.w	r5, #0
 8003350:	00dd      	lsls	r5, r3, #3
 8003352:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003356:	00d4      	lsls	r4, r2, #3
 8003358:	4622      	mov	r2, r4
 800335a:	462b      	mov	r3, r5
 800335c:	1814      	adds	r4, r2, r0
 800335e:	653c      	str	r4, [r7, #80]	; 0x50
 8003360:	414b      	adcs	r3, r1
 8003362:	657b      	str	r3, [r7, #84]	; 0x54
 8003364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	461a      	mov	r2, r3
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	1891      	adds	r1, r2, r2
 8003370:	61b9      	str	r1, [r7, #24]
 8003372:	415b      	adcs	r3, r3
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800337a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800337e:	f7fc ff87 	bl	8000290 <__aeabi_uldivmod>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	4b6c      	ldr	r3, [pc, #432]	; (8003538 <UART_SetConfig+0x38c>)
 8003388:	fba3 1302 	umull	r1, r3, r3, r2
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	2164      	movs	r1, #100	; 0x64
 8003390:	fb01 f303 	mul.w	r3, r1, r3
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	3332      	adds	r3, #50	; 0x32
 800339a:	4a67      	ldr	r2, [pc, #412]	; (8003538 <UART_SetConfig+0x38c>)
 800339c:	fba2 2303 	umull	r2, r3, r2, r3
 80033a0:	095b      	lsrs	r3, r3, #5
 80033a2:	f003 0207 	and.w	r2, r3, #7
 80033a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4432      	add	r2, r6
 80033ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033ae:	e0b9      	b.n	8003524 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b2:	461c      	mov	r4, r3
 80033b4:	f04f 0500 	mov.w	r5, #0
 80033b8:	4622      	mov	r2, r4
 80033ba:	462b      	mov	r3, r5
 80033bc:	1891      	adds	r1, r2, r2
 80033be:	6139      	str	r1, [r7, #16]
 80033c0:	415b      	adcs	r3, r3
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033c8:	1912      	adds	r2, r2, r4
 80033ca:	eb45 0303 	adc.w	r3, r5, r3
 80033ce:	f04f 0000 	mov.w	r0, #0
 80033d2:	f04f 0100 	mov.w	r1, #0
 80033d6:	00d9      	lsls	r1, r3, #3
 80033d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033dc:	00d0      	lsls	r0, r2, #3
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	eb12 0804 	adds.w	r8, r2, r4
 80033e6:	eb43 0905 	adc.w	r9, r3, r5
 80033ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f04f 0100 	mov.w	r1, #0
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	008b      	lsls	r3, r1, #2
 80033fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003402:	0082      	lsls	r2, r0, #2
 8003404:	4640      	mov	r0, r8
 8003406:	4649      	mov	r1, r9
 8003408:	f7fc ff42 	bl	8000290 <__aeabi_uldivmod>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4b49      	ldr	r3, [pc, #292]	; (8003538 <UART_SetConfig+0x38c>)
 8003412:	fba3 2302 	umull	r2, r3, r3, r2
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	011e      	lsls	r6, r3, #4
 800341a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800341c:	4618      	mov	r0, r3
 800341e:	f04f 0100 	mov.w	r1, #0
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	1894      	adds	r4, r2, r2
 8003428:	60bc      	str	r4, [r7, #8]
 800342a:	415b      	adcs	r3, r3
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003432:	1812      	adds	r2, r2, r0
 8003434:	eb41 0303 	adc.w	r3, r1, r3
 8003438:	f04f 0400 	mov.w	r4, #0
 800343c:	f04f 0500 	mov.w	r5, #0
 8003440:	00dd      	lsls	r5, r3, #3
 8003442:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003446:	00d4      	lsls	r4, r2, #3
 8003448:	4622      	mov	r2, r4
 800344a:	462b      	mov	r3, r5
 800344c:	1814      	adds	r4, r2, r0
 800344e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003450:	414b      	adcs	r3, r1
 8003452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	4618      	mov	r0, r3
 800345a:	f04f 0100 	mov.w	r1, #0
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	008b      	lsls	r3, r1, #2
 8003468:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800346c:	0082      	lsls	r2, r0, #2
 800346e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003472:	f7fc ff0d 	bl	8000290 <__aeabi_uldivmod>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4b2f      	ldr	r3, [pc, #188]	; (8003538 <UART_SetConfig+0x38c>)
 800347c:	fba3 1302 	umull	r1, r3, r3, r2
 8003480:	095b      	lsrs	r3, r3, #5
 8003482:	2164      	movs	r1, #100	; 0x64
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	3332      	adds	r3, #50	; 0x32
 800348e:	4a2a      	ldr	r2, [pc, #168]	; (8003538 <UART_SetConfig+0x38c>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	095b      	lsrs	r3, r3, #5
 8003496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800349a:	441e      	add	r6, r3
 800349c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800349e:	4618      	mov	r0, r3
 80034a0:	f04f 0100 	mov.w	r1, #0
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	1894      	adds	r4, r2, r2
 80034aa:	603c      	str	r4, [r7, #0]
 80034ac:	415b      	adcs	r3, r3
 80034ae:	607b      	str	r3, [r7, #4]
 80034b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034b4:	1812      	adds	r2, r2, r0
 80034b6:	eb41 0303 	adc.w	r3, r1, r3
 80034ba:	f04f 0400 	mov.w	r4, #0
 80034be:	f04f 0500 	mov.w	r5, #0
 80034c2:	00dd      	lsls	r5, r3, #3
 80034c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034c8:	00d4      	lsls	r4, r2, #3
 80034ca:	4622      	mov	r2, r4
 80034cc:	462b      	mov	r3, r5
 80034ce:	eb12 0a00 	adds.w	sl, r2, r0
 80034d2:	eb43 0b01 	adc.w	fp, r3, r1
 80034d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4618      	mov	r0, r3
 80034dc:	f04f 0100 	mov.w	r1, #0
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	008b      	lsls	r3, r1, #2
 80034ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80034ee:	0082      	lsls	r2, r0, #2
 80034f0:	4650      	mov	r0, sl
 80034f2:	4659      	mov	r1, fp
 80034f4:	f7fc fecc 	bl	8000290 <__aeabi_uldivmod>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <UART_SetConfig+0x38c>)
 80034fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	2164      	movs	r1, #100	; 0x64
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	3332      	adds	r3, #50	; 0x32
 8003510:	4a09      	ldr	r2, [pc, #36]	; (8003538 <UART_SetConfig+0x38c>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	f003 020f 	and.w	r2, r3, #15
 800351c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4432      	add	r2, r6
 8003522:	609a      	str	r2, [r3, #8]
}
 8003524:	bf00      	nop
 8003526:	377c      	adds	r7, #124	; 0x7c
 8003528:	46bd      	mov	sp, r7
 800352a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800352e:	bf00      	nop
 8003530:	40011000 	.word	0x40011000
 8003534:	40011400 	.word	0x40011400
 8003538:	51eb851f 	.word	0x51eb851f

0800353c <__errno>:
 800353c:	4b01      	ldr	r3, [pc, #4]	; (8003544 <__errno+0x8>)
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	2000000c 	.word	0x2000000c

08003548 <__libc_init_array>:
 8003548:	b570      	push	{r4, r5, r6, lr}
 800354a:	4d0d      	ldr	r5, [pc, #52]	; (8003580 <__libc_init_array+0x38>)
 800354c:	4c0d      	ldr	r4, [pc, #52]	; (8003584 <__libc_init_array+0x3c>)
 800354e:	1b64      	subs	r4, r4, r5
 8003550:	10a4      	asrs	r4, r4, #2
 8003552:	2600      	movs	r6, #0
 8003554:	42a6      	cmp	r6, r4
 8003556:	d109      	bne.n	800356c <__libc_init_array+0x24>
 8003558:	4d0b      	ldr	r5, [pc, #44]	; (8003588 <__libc_init_array+0x40>)
 800355a:	4c0c      	ldr	r4, [pc, #48]	; (800358c <__libc_init_array+0x44>)
 800355c:	f000 fc4e 	bl	8003dfc <_init>
 8003560:	1b64      	subs	r4, r4, r5
 8003562:	10a4      	asrs	r4, r4, #2
 8003564:	2600      	movs	r6, #0
 8003566:	42a6      	cmp	r6, r4
 8003568:	d105      	bne.n	8003576 <__libc_init_array+0x2e>
 800356a:	bd70      	pop	{r4, r5, r6, pc}
 800356c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003570:	4798      	blx	r3
 8003572:	3601      	adds	r6, #1
 8003574:	e7ee      	b.n	8003554 <__libc_init_array+0xc>
 8003576:	f855 3b04 	ldr.w	r3, [r5], #4
 800357a:	4798      	blx	r3
 800357c:	3601      	adds	r6, #1
 800357e:	e7f2      	b.n	8003566 <__libc_init_array+0x1e>
 8003580:	08003e78 	.word	0x08003e78
 8003584:	08003e78 	.word	0x08003e78
 8003588:	08003e78 	.word	0x08003e78
 800358c:	08003e7c 	.word	0x08003e7c

08003590 <memset>:
 8003590:	4402      	add	r2, r0
 8003592:	4603      	mov	r3, r0
 8003594:	4293      	cmp	r3, r2
 8003596:	d100      	bne.n	800359a <memset+0xa>
 8003598:	4770      	bx	lr
 800359a:	f803 1b01 	strb.w	r1, [r3], #1
 800359e:	e7f9      	b.n	8003594 <memset+0x4>

080035a0 <siprintf>:
 80035a0:	b40e      	push	{r1, r2, r3}
 80035a2:	b500      	push	{lr}
 80035a4:	b09c      	sub	sp, #112	; 0x70
 80035a6:	ab1d      	add	r3, sp, #116	; 0x74
 80035a8:	9002      	str	r0, [sp, #8]
 80035aa:	9006      	str	r0, [sp, #24]
 80035ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035b0:	4809      	ldr	r0, [pc, #36]	; (80035d8 <siprintf+0x38>)
 80035b2:	9107      	str	r1, [sp, #28]
 80035b4:	9104      	str	r1, [sp, #16]
 80035b6:	4909      	ldr	r1, [pc, #36]	; (80035dc <siprintf+0x3c>)
 80035b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80035bc:	9105      	str	r1, [sp, #20]
 80035be:	6800      	ldr	r0, [r0, #0]
 80035c0:	9301      	str	r3, [sp, #4]
 80035c2:	a902      	add	r1, sp, #8
 80035c4:	f000 f868 	bl	8003698 <_svfiprintf_r>
 80035c8:	9b02      	ldr	r3, [sp, #8]
 80035ca:	2200      	movs	r2, #0
 80035cc:	701a      	strb	r2, [r3, #0]
 80035ce:	b01c      	add	sp, #112	; 0x70
 80035d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80035d4:	b003      	add	sp, #12
 80035d6:	4770      	bx	lr
 80035d8:	2000000c 	.word	0x2000000c
 80035dc:	ffff0208 	.word	0xffff0208

080035e0 <__ssputs_r>:
 80035e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035e4:	688e      	ldr	r6, [r1, #8]
 80035e6:	429e      	cmp	r6, r3
 80035e8:	4682      	mov	sl, r0
 80035ea:	460c      	mov	r4, r1
 80035ec:	4690      	mov	r8, r2
 80035ee:	461f      	mov	r7, r3
 80035f0:	d838      	bhi.n	8003664 <__ssputs_r+0x84>
 80035f2:	898a      	ldrh	r2, [r1, #12]
 80035f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035f8:	d032      	beq.n	8003660 <__ssputs_r+0x80>
 80035fa:	6825      	ldr	r5, [r4, #0]
 80035fc:	6909      	ldr	r1, [r1, #16]
 80035fe:	eba5 0901 	sub.w	r9, r5, r1
 8003602:	6965      	ldr	r5, [r4, #20]
 8003604:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003608:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800360c:	3301      	adds	r3, #1
 800360e:	444b      	add	r3, r9
 8003610:	106d      	asrs	r5, r5, #1
 8003612:	429d      	cmp	r5, r3
 8003614:	bf38      	it	cc
 8003616:	461d      	movcc	r5, r3
 8003618:	0553      	lsls	r3, r2, #21
 800361a:	d531      	bpl.n	8003680 <__ssputs_r+0xa0>
 800361c:	4629      	mov	r1, r5
 800361e:	f000 fb47 	bl	8003cb0 <_malloc_r>
 8003622:	4606      	mov	r6, r0
 8003624:	b950      	cbnz	r0, 800363c <__ssputs_r+0x5c>
 8003626:	230c      	movs	r3, #12
 8003628:	f8ca 3000 	str.w	r3, [sl]
 800362c:	89a3      	ldrh	r3, [r4, #12]
 800362e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003632:	81a3      	strh	r3, [r4, #12]
 8003634:	f04f 30ff 	mov.w	r0, #4294967295
 8003638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800363c:	6921      	ldr	r1, [r4, #16]
 800363e:	464a      	mov	r2, r9
 8003640:	f000 fabe 	bl	8003bc0 <memcpy>
 8003644:	89a3      	ldrh	r3, [r4, #12]
 8003646:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800364a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800364e:	81a3      	strh	r3, [r4, #12]
 8003650:	6126      	str	r6, [r4, #16]
 8003652:	6165      	str	r5, [r4, #20]
 8003654:	444e      	add	r6, r9
 8003656:	eba5 0509 	sub.w	r5, r5, r9
 800365a:	6026      	str	r6, [r4, #0]
 800365c:	60a5      	str	r5, [r4, #8]
 800365e:	463e      	mov	r6, r7
 8003660:	42be      	cmp	r6, r7
 8003662:	d900      	bls.n	8003666 <__ssputs_r+0x86>
 8003664:	463e      	mov	r6, r7
 8003666:	4632      	mov	r2, r6
 8003668:	6820      	ldr	r0, [r4, #0]
 800366a:	4641      	mov	r1, r8
 800366c:	f000 fab6 	bl	8003bdc <memmove>
 8003670:	68a3      	ldr	r3, [r4, #8]
 8003672:	6822      	ldr	r2, [r4, #0]
 8003674:	1b9b      	subs	r3, r3, r6
 8003676:	4432      	add	r2, r6
 8003678:	60a3      	str	r3, [r4, #8]
 800367a:	6022      	str	r2, [r4, #0]
 800367c:	2000      	movs	r0, #0
 800367e:	e7db      	b.n	8003638 <__ssputs_r+0x58>
 8003680:	462a      	mov	r2, r5
 8003682:	f000 fb6f 	bl	8003d64 <_realloc_r>
 8003686:	4606      	mov	r6, r0
 8003688:	2800      	cmp	r0, #0
 800368a:	d1e1      	bne.n	8003650 <__ssputs_r+0x70>
 800368c:	6921      	ldr	r1, [r4, #16]
 800368e:	4650      	mov	r0, sl
 8003690:	f000 fabe 	bl	8003c10 <_free_r>
 8003694:	e7c7      	b.n	8003626 <__ssputs_r+0x46>
	...

08003698 <_svfiprintf_r>:
 8003698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800369c:	4698      	mov	r8, r3
 800369e:	898b      	ldrh	r3, [r1, #12]
 80036a0:	061b      	lsls	r3, r3, #24
 80036a2:	b09d      	sub	sp, #116	; 0x74
 80036a4:	4607      	mov	r7, r0
 80036a6:	460d      	mov	r5, r1
 80036a8:	4614      	mov	r4, r2
 80036aa:	d50e      	bpl.n	80036ca <_svfiprintf_r+0x32>
 80036ac:	690b      	ldr	r3, [r1, #16]
 80036ae:	b963      	cbnz	r3, 80036ca <_svfiprintf_r+0x32>
 80036b0:	2140      	movs	r1, #64	; 0x40
 80036b2:	f000 fafd 	bl	8003cb0 <_malloc_r>
 80036b6:	6028      	str	r0, [r5, #0]
 80036b8:	6128      	str	r0, [r5, #16]
 80036ba:	b920      	cbnz	r0, 80036c6 <_svfiprintf_r+0x2e>
 80036bc:	230c      	movs	r3, #12
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	f04f 30ff 	mov.w	r0, #4294967295
 80036c4:	e0d1      	b.n	800386a <_svfiprintf_r+0x1d2>
 80036c6:	2340      	movs	r3, #64	; 0x40
 80036c8:	616b      	str	r3, [r5, #20]
 80036ca:	2300      	movs	r3, #0
 80036cc:	9309      	str	r3, [sp, #36]	; 0x24
 80036ce:	2320      	movs	r3, #32
 80036d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80036d8:	2330      	movs	r3, #48	; 0x30
 80036da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003884 <_svfiprintf_r+0x1ec>
 80036de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036e2:	f04f 0901 	mov.w	r9, #1
 80036e6:	4623      	mov	r3, r4
 80036e8:	469a      	mov	sl, r3
 80036ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036ee:	b10a      	cbz	r2, 80036f4 <_svfiprintf_r+0x5c>
 80036f0:	2a25      	cmp	r2, #37	; 0x25
 80036f2:	d1f9      	bne.n	80036e8 <_svfiprintf_r+0x50>
 80036f4:	ebba 0b04 	subs.w	fp, sl, r4
 80036f8:	d00b      	beq.n	8003712 <_svfiprintf_r+0x7a>
 80036fa:	465b      	mov	r3, fp
 80036fc:	4622      	mov	r2, r4
 80036fe:	4629      	mov	r1, r5
 8003700:	4638      	mov	r0, r7
 8003702:	f7ff ff6d 	bl	80035e0 <__ssputs_r>
 8003706:	3001      	adds	r0, #1
 8003708:	f000 80aa 	beq.w	8003860 <_svfiprintf_r+0x1c8>
 800370c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800370e:	445a      	add	r2, fp
 8003710:	9209      	str	r2, [sp, #36]	; 0x24
 8003712:	f89a 3000 	ldrb.w	r3, [sl]
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 80a2 	beq.w	8003860 <_svfiprintf_r+0x1c8>
 800371c:	2300      	movs	r3, #0
 800371e:	f04f 32ff 	mov.w	r2, #4294967295
 8003722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003726:	f10a 0a01 	add.w	sl, sl, #1
 800372a:	9304      	str	r3, [sp, #16]
 800372c:	9307      	str	r3, [sp, #28]
 800372e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003732:	931a      	str	r3, [sp, #104]	; 0x68
 8003734:	4654      	mov	r4, sl
 8003736:	2205      	movs	r2, #5
 8003738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800373c:	4851      	ldr	r0, [pc, #324]	; (8003884 <_svfiprintf_r+0x1ec>)
 800373e:	f7fc fd57 	bl	80001f0 <memchr>
 8003742:	9a04      	ldr	r2, [sp, #16]
 8003744:	b9d8      	cbnz	r0, 800377e <_svfiprintf_r+0xe6>
 8003746:	06d0      	lsls	r0, r2, #27
 8003748:	bf44      	itt	mi
 800374a:	2320      	movmi	r3, #32
 800374c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003750:	0711      	lsls	r1, r2, #28
 8003752:	bf44      	itt	mi
 8003754:	232b      	movmi	r3, #43	; 0x2b
 8003756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800375a:	f89a 3000 	ldrb.w	r3, [sl]
 800375e:	2b2a      	cmp	r3, #42	; 0x2a
 8003760:	d015      	beq.n	800378e <_svfiprintf_r+0xf6>
 8003762:	9a07      	ldr	r2, [sp, #28]
 8003764:	4654      	mov	r4, sl
 8003766:	2000      	movs	r0, #0
 8003768:	f04f 0c0a 	mov.w	ip, #10
 800376c:	4621      	mov	r1, r4
 800376e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003772:	3b30      	subs	r3, #48	; 0x30
 8003774:	2b09      	cmp	r3, #9
 8003776:	d94e      	bls.n	8003816 <_svfiprintf_r+0x17e>
 8003778:	b1b0      	cbz	r0, 80037a8 <_svfiprintf_r+0x110>
 800377a:	9207      	str	r2, [sp, #28]
 800377c:	e014      	b.n	80037a8 <_svfiprintf_r+0x110>
 800377e:	eba0 0308 	sub.w	r3, r0, r8
 8003782:	fa09 f303 	lsl.w	r3, r9, r3
 8003786:	4313      	orrs	r3, r2
 8003788:	9304      	str	r3, [sp, #16]
 800378a:	46a2      	mov	sl, r4
 800378c:	e7d2      	b.n	8003734 <_svfiprintf_r+0x9c>
 800378e:	9b03      	ldr	r3, [sp, #12]
 8003790:	1d19      	adds	r1, r3, #4
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	9103      	str	r1, [sp, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	bfbb      	ittet	lt
 800379a:	425b      	neglt	r3, r3
 800379c:	f042 0202 	orrlt.w	r2, r2, #2
 80037a0:	9307      	strge	r3, [sp, #28]
 80037a2:	9307      	strlt	r3, [sp, #28]
 80037a4:	bfb8      	it	lt
 80037a6:	9204      	strlt	r2, [sp, #16]
 80037a8:	7823      	ldrb	r3, [r4, #0]
 80037aa:	2b2e      	cmp	r3, #46	; 0x2e
 80037ac:	d10c      	bne.n	80037c8 <_svfiprintf_r+0x130>
 80037ae:	7863      	ldrb	r3, [r4, #1]
 80037b0:	2b2a      	cmp	r3, #42	; 0x2a
 80037b2:	d135      	bne.n	8003820 <_svfiprintf_r+0x188>
 80037b4:	9b03      	ldr	r3, [sp, #12]
 80037b6:	1d1a      	adds	r2, r3, #4
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	9203      	str	r2, [sp, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	bfb8      	it	lt
 80037c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80037c4:	3402      	adds	r4, #2
 80037c6:	9305      	str	r3, [sp, #20]
 80037c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003894 <_svfiprintf_r+0x1fc>
 80037cc:	7821      	ldrb	r1, [r4, #0]
 80037ce:	2203      	movs	r2, #3
 80037d0:	4650      	mov	r0, sl
 80037d2:	f7fc fd0d 	bl	80001f0 <memchr>
 80037d6:	b140      	cbz	r0, 80037ea <_svfiprintf_r+0x152>
 80037d8:	2340      	movs	r3, #64	; 0x40
 80037da:	eba0 000a 	sub.w	r0, r0, sl
 80037de:	fa03 f000 	lsl.w	r0, r3, r0
 80037e2:	9b04      	ldr	r3, [sp, #16]
 80037e4:	4303      	orrs	r3, r0
 80037e6:	3401      	adds	r4, #1
 80037e8:	9304      	str	r3, [sp, #16]
 80037ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037ee:	4826      	ldr	r0, [pc, #152]	; (8003888 <_svfiprintf_r+0x1f0>)
 80037f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037f4:	2206      	movs	r2, #6
 80037f6:	f7fc fcfb 	bl	80001f0 <memchr>
 80037fa:	2800      	cmp	r0, #0
 80037fc:	d038      	beq.n	8003870 <_svfiprintf_r+0x1d8>
 80037fe:	4b23      	ldr	r3, [pc, #140]	; (800388c <_svfiprintf_r+0x1f4>)
 8003800:	bb1b      	cbnz	r3, 800384a <_svfiprintf_r+0x1b2>
 8003802:	9b03      	ldr	r3, [sp, #12]
 8003804:	3307      	adds	r3, #7
 8003806:	f023 0307 	bic.w	r3, r3, #7
 800380a:	3308      	adds	r3, #8
 800380c:	9303      	str	r3, [sp, #12]
 800380e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003810:	4433      	add	r3, r6
 8003812:	9309      	str	r3, [sp, #36]	; 0x24
 8003814:	e767      	b.n	80036e6 <_svfiprintf_r+0x4e>
 8003816:	fb0c 3202 	mla	r2, ip, r2, r3
 800381a:	460c      	mov	r4, r1
 800381c:	2001      	movs	r0, #1
 800381e:	e7a5      	b.n	800376c <_svfiprintf_r+0xd4>
 8003820:	2300      	movs	r3, #0
 8003822:	3401      	adds	r4, #1
 8003824:	9305      	str	r3, [sp, #20]
 8003826:	4619      	mov	r1, r3
 8003828:	f04f 0c0a 	mov.w	ip, #10
 800382c:	4620      	mov	r0, r4
 800382e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003832:	3a30      	subs	r2, #48	; 0x30
 8003834:	2a09      	cmp	r2, #9
 8003836:	d903      	bls.n	8003840 <_svfiprintf_r+0x1a8>
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0c5      	beq.n	80037c8 <_svfiprintf_r+0x130>
 800383c:	9105      	str	r1, [sp, #20]
 800383e:	e7c3      	b.n	80037c8 <_svfiprintf_r+0x130>
 8003840:	fb0c 2101 	mla	r1, ip, r1, r2
 8003844:	4604      	mov	r4, r0
 8003846:	2301      	movs	r3, #1
 8003848:	e7f0      	b.n	800382c <_svfiprintf_r+0x194>
 800384a:	ab03      	add	r3, sp, #12
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	462a      	mov	r2, r5
 8003850:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <_svfiprintf_r+0x1f8>)
 8003852:	a904      	add	r1, sp, #16
 8003854:	4638      	mov	r0, r7
 8003856:	f3af 8000 	nop.w
 800385a:	1c42      	adds	r2, r0, #1
 800385c:	4606      	mov	r6, r0
 800385e:	d1d6      	bne.n	800380e <_svfiprintf_r+0x176>
 8003860:	89ab      	ldrh	r3, [r5, #12]
 8003862:	065b      	lsls	r3, r3, #25
 8003864:	f53f af2c 	bmi.w	80036c0 <_svfiprintf_r+0x28>
 8003868:	9809      	ldr	r0, [sp, #36]	; 0x24
 800386a:	b01d      	add	sp, #116	; 0x74
 800386c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003870:	ab03      	add	r3, sp, #12
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	462a      	mov	r2, r5
 8003876:	4b06      	ldr	r3, [pc, #24]	; (8003890 <_svfiprintf_r+0x1f8>)
 8003878:	a904      	add	r1, sp, #16
 800387a:	4638      	mov	r0, r7
 800387c:	f000 f87a 	bl	8003974 <_printf_i>
 8003880:	e7eb      	b.n	800385a <_svfiprintf_r+0x1c2>
 8003882:	bf00      	nop
 8003884:	08003e3c 	.word	0x08003e3c
 8003888:	08003e46 	.word	0x08003e46
 800388c:	00000000 	.word	0x00000000
 8003890:	080035e1 	.word	0x080035e1
 8003894:	08003e42 	.word	0x08003e42

08003898 <_printf_common>:
 8003898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800389c:	4616      	mov	r6, r2
 800389e:	4699      	mov	r9, r3
 80038a0:	688a      	ldr	r2, [r1, #8]
 80038a2:	690b      	ldr	r3, [r1, #16]
 80038a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038a8:	4293      	cmp	r3, r2
 80038aa:	bfb8      	it	lt
 80038ac:	4613      	movlt	r3, r2
 80038ae:	6033      	str	r3, [r6, #0]
 80038b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038b4:	4607      	mov	r7, r0
 80038b6:	460c      	mov	r4, r1
 80038b8:	b10a      	cbz	r2, 80038be <_printf_common+0x26>
 80038ba:	3301      	adds	r3, #1
 80038bc:	6033      	str	r3, [r6, #0]
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	0699      	lsls	r1, r3, #26
 80038c2:	bf42      	ittt	mi
 80038c4:	6833      	ldrmi	r3, [r6, #0]
 80038c6:	3302      	addmi	r3, #2
 80038c8:	6033      	strmi	r3, [r6, #0]
 80038ca:	6825      	ldr	r5, [r4, #0]
 80038cc:	f015 0506 	ands.w	r5, r5, #6
 80038d0:	d106      	bne.n	80038e0 <_printf_common+0x48>
 80038d2:	f104 0a19 	add.w	sl, r4, #25
 80038d6:	68e3      	ldr	r3, [r4, #12]
 80038d8:	6832      	ldr	r2, [r6, #0]
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	42ab      	cmp	r3, r5
 80038de:	dc26      	bgt.n	800392e <_printf_common+0x96>
 80038e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038e4:	1e13      	subs	r3, r2, #0
 80038e6:	6822      	ldr	r2, [r4, #0]
 80038e8:	bf18      	it	ne
 80038ea:	2301      	movne	r3, #1
 80038ec:	0692      	lsls	r2, r2, #26
 80038ee:	d42b      	bmi.n	8003948 <_printf_common+0xb0>
 80038f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038f4:	4649      	mov	r1, r9
 80038f6:	4638      	mov	r0, r7
 80038f8:	47c0      	blx	r8
 80038fa:	3001      	adds	r0, #1
 80038fc:	d01e      	beq.n	800393c <_printf_common+0xa4>
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	68e5      	ldr	r5, [r4, #12]
 8003902:	6832      	ldr	r2, [r6, #0]
 8003904:	f003 0306 	and.w	r3, r3, #6
 8003908:	2b04      	cmp	r3, #4
 800390a:	bf08      	it	eq
 800390c:	1aad      	subeq	r5, r5, r2
 800390e:	68a3      	ldr	r3, [r4, #8]
 8003910:	6922      	ldr	r2, [r4, #16]
 8003912:	bf0c      	ite	eq
 8003914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003918:	2500      	movne	r5, #0
 800391a:	4293      	cmp	r3, r2
 800391c:	bfc4      	itt	gt
 800391e:	1a9b      	subgt	r3, r3, r2
 8003920:	18ed      	addgt	r5, r5, r3
 8003922:	2600      	movs	r6, #0
 8003924:	341a      	adds	r4, #26
 8003926:	42b5      	cmp	r5, r6
 8003928:	d11a      	bne.n	8003960 <_printf_common+0xc8>
 800392a:	2000      	movs	r0, #0
 800392c:	e008      	b.n	8003940 <_printf_common+0xa8>
 800392e:	2301      	movs	r3, #1
 8003930:	4652      	mov	r2, sl
 8003932:	4649      	mov	r1, r9
 8003934:	4638      	mov	r0, r7
 8003936:	47c0      	blx	r8
 8003938:	3001      	adds	r0, #1
 800393a:	d103      	bne.n	8003944 <_printf_common+0xac>
 800393c:	f04f 30ff 	mov.w	r0, #4294967295
 8003940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003944:	3501      	adds	r5, #1
 8003946:	e7c6      	b.n	80038d6 <_printf_common+0x3e>
 8003948:	18e1      	adds	r1, r4, r3
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	2030      	movs	r0, #48	; 0x30
 800394e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003952:	4422      	add	r2, r4
 8003954:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003958:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800395c:	3302      	adds	r3, #2
 800395e:	e7c7      	b.n	80038f0 <_printf_common+0x58>
 8003960:	2301      	movs	r3, #1
 8003962:	4622      	mov	r2, r4
 8003964:	4649      	mov	r1, r9
 8003966:	4638      	mov	r0, r7
 8003968:	47c0      	blx	r8
 800396a:	3001      	adds	r0, #1
 800396c:	d0e6      	beq.n	800393c <_printf_common+0xa4>
 800396e:	3601      	adds	r6, #1
 8003970:	e7d9      	b.n	8003926 <_printf_common+0x8e>
	...

08003974 <_printf_i>:
 8003974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003978:	460c      	mov	r4, r1
 800397a:	4691      	mov	r9, r2
 800397c:	7e27      	ldrb	r7, [r4, #24]
 800397e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003980:	2f78      	cmp	r7, #120	; 0x78
 8003982:	4680      	mov	r8, r0
 8003984:	469a      	mov	sl, r3
 8003986:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800398a:	d807      	bhi.n	800399c <_printf_i+0x28>
 800398c:	2f62      	cmp	r7, #98	; 0x62
 800398e:	d80a      	bhi.n	80039a6 <_printf_i+0x32>
 8003990:	2f00      	cmp	r7, #0
 8003992:	f000 80d8 	beq.w	8003b46 <_printf_i+0x1d2>
 8003996:	2f58      	cmp	r7, #88	; 0x58
 8003998:	f000 80a3 	beq.w	8003ae2 <_printf_i+0x16e>
 800399c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039a4:	e03a      	b.n	8003a1c <_printf_i+0xa8>
 80039a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039aa:	2b15      	cmp	r3, #21
 80039ac:	d8f6      	bhi.n	800399c <_printf_i+0x28>
 80039ae:	a001      	add	r0, pc, #4	; (adr r0, 80039b4 <_printf_i+0x40>)
 80039b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80039b4:	08003a0d 	.word	0x08003a0d
 80039b8:	08003a21 	.word	0x08003a21
 80039bc:	0800399d 	.word	0x0800399d
 80039c0:	0800399d 	.word	0x0800399d
 80039c4:	0800399d 	.word	0x0800399d
 80039c8:	0800399d 	.word	0x0800399d
 80039cc:	08003a21 	.word	0x08003a21
 80039d0:	0800399d 	.word	0x0800399d
 80039d4:	0800399d 	.word	0x0800399d
 80039d8:	0800399d 	.word	0x0800399d
 80039dc:	0800399d 	.word	0x0800399d
 80039e0:	08003b2d 	.word	0x08003b2d
 80039e4:	08003a51 	.word	0x08003a51
 80039e8:	08003b0f 	.word	0x08003b0f
 80039ec:	0800399d 	.word	0x0800399d
 80039f0:	0800399d 	.word	0x0800399d
 80039f4:	08003b4f 	.word	0x08003b4f
 80039f8:	0800399d 	.word	0x0800399d
 80039fc:	08003a51 	.word	0x08003a51
 8003a00:	0800399d 	.word	0x0800399d
 8003a04:	0800399d 	.word	0x0800399d
 8003a08:	08003b17 	.word	0x08003b17
 8003a0c:	680b      	ldr	r3, [r1, #0]
 8003a0e:	1d1a      	adds	r2, r3, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	600a      	str	r2, [r1, #0]
 8003a14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0a3      	b.n	8003b68 <_printf_i+0x1f4>
 8003a20:	6825      	ldr	r5, [r4, #0]
 8003a22:	6808      	ldr	r0, [r1, #0]
 8003a24:	062e      	lsls	r6, r5, #24
 8003a26:	f100 0304 	add.w	r3, r0, #4
 8003a2a:	d50a      	bpl.n	8003a42 <_printf_i+0xce>
 8003a2c:	6805      	ldr	r5, [r0, #0]
 8003a2e:	600b      	str	r3, [r1, #0]
 8003a30:	2d00      	cmp	r5, #0
 8003a32:	da03      	bge.n	8003a3c <_printf_i+0xc8>
 8003a34:	232d      	movs	r3, #45	; 0x2d
 8003a36:	426d      	negs	r5, r5
 8003a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a3c:	485e      	ldr	r0, [pc, #376]	; (8003bb8 <_printf_i+0x244>)
 8003a3e:	230a      	movs	r3, #10
 8003a40:	e019      	b.n	8003a76 <_printf_i+0x102>
 8003a42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003a46:	6805      	ldr	r5, [r0, #0]
 8003a48:	600b      	str	r3, [r1, #0]
 8003a4a:	bf18      	it	ne
 8003a4c:	b22d      	sxthne	r5, r5
 8003a4e:	e7ef      	b.n	8003a30 <_printf_i+0xbc>
 8003a50:	680b      	ldr	r3, [r1, #0]
 8003a52:	6825      	ldr	r5, [r4, #0]
 8003a54:	1d18      	adds	r0, r3, #4
 8003a56:	6008      	str	r0, [r1, #0]
 8003a58:	0628      	lsls	r0, r5, #24
 8003a5a:	d501      	bpl.n	8003a60 <_printf_i+0xec>
 8003a5c:	681d      	ldr	r5, [r3, #0]
 8003a5e:	e002      	b.n	8003a66 <_printf_i+0xf2>
 8003a60:	0669      	lsls	r1, r5, #25
 8003a62:	d5fb      	bpl.n	8003a5c <_printf_i+0xe8>
 8003a64:	881d      	ldrh	r5, [r3, #0]
 8003a66:	4854      	ldr	r0, [pc, #336]	; (8003bb8 <_printf_i+0x244>)
 8003a68:	2f6f      	cmp	r7, #111	; 0x6f
 8003a6a:	bf0c      	ite	eq
 8003a6c:	2308      	moveq	r3, #8
 8003a6e:	230a      	movne	r3, #10
 8003a70:	2100      	movs	r1, #0
 8003a72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a76:	6866      	ldr	r6, [r4, #4]
 8003a78:	60a6      	str	r6, [r4, #8]
 8003a7a:	2e00      	cmp	r6, #0
 8003a7c:	bfa2      	ittt	ge
 8003a7e:	6821      	ldrge	r1, [r4, #0]
 8003a80:	f021 0104 	bicge.w	r1, r1, #4
 8003a84:	6021      	strge	r1, [r4, #0]
 8003a86:	b90d      	cbnz	r5, 8003a8c <_printf_i+0x118>
 8003a88:	2e00      	cmp	r6, #0
 8003a8a:	d04d      	beq.n	8003b28 <_printf_i+0x1b4>
 8003a8c:	4616      	mov	r6, r2
 8003a8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a92:	fb03 5711 	mls	r7, r3, r1, r5
 8003a96:	5dc7      	ldrb	r7, [r0, r7]
 8003a98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a9c:	462f      	mov	r7, r5
 8003a9e:	42bb      	cmp	r3, r7
 8003aa0:	460d      	mov	r5, r1
 8003aa2:	d9f4      	bls.n	8003a8e <_printf_i+0x11a>
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d10b      	bne.n	8003ac0 <_printf_i+0x14c>
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	07df      	lsls	r7, r3, #31
 8003aac:	d508      	bpl.n	8003ac0 <_printf_i+0x14c>
 8003aae:	6923      	ldr	r3, [r4, #16]
 8003ab0:	6861      	ldr	r1, [r4, #4]
 8003ab2:	4299      	cmp	r1, r3
 8003ab4:	bfde      	ittt	le
 8003ab6:	2330      	movle	r3, #48	; 0x30
 8003ab8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003abc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ac0:	1b92      	subs	r2, r2, r6
 8003ac2:	6122      	str	r2, [r4, #16]
 8003ac4:	f8cd a000 	str.w	sl, [sp]
 8003ac8:	464b      	mov	r3, r9
 8003aca:	aa03      	add	r2, sp, #12
 8003acc:	4621      	mov	r1, r4
 8003ace:	4640      	mov	r0, r8
 8003ad0:	f7ff fee2 	bl	8003898 <_printf_common>
 8003ad4:	3001      	adds	r0, #1
 8003ad6:	d14c      	bne.n	8003b72 <_printf_i+0x1fe>
 8003ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8003adc:	b004      	add	sp, #16
 8003ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae2:	4835      	ldr	r0, [pc, #212]	; (8003bb8 <_printf_i+0x244>)
 8003ae4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	680e      	ldr	r6, [r1, #0]
 8003aec:	061f      	lsls	r7, r3, #24
 8003aee:	f856 5b04 	ldr.w	r5, [r6], #4
 8003af2:	600e      	str	r6, [r1, #0]
 8003af4:	d514      	bpl.n	8003b20 <_printf_i+0x1ac>
 8003af6:	07d9      	lsls	r1, r3, #31
 8003af8:	bf44      	itt	mi
 8003afa:	f043 0320 	orrmi.w	r3, r3, #32
 8003afe:	6023      	strmi	r3, [r4, #0]
 8003b00:	b91d      	cbnz	r5, 8003b0a <_printf_i+0x196>
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	f023 0320 	bic.w	r3, r3, #32
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	2310      	movs	r3, #16
 8003b0c:	e7b0      	b.n	8003a70 <_printf_i+0xfc>
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	f043 0320 	orr.w	r3, r3, #32
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	2378      	movs	r3, #120	; 0x78
 8003b18:	4828      	ldr	r0, [pc, #160]	; (8003bbc <_printf_i+0x248>)
 8003b1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b1e:	e7e3      	b.n	8003ae8 <_printf_i+0x174>
 8003b20:	065e      	lsls	r6, r3, #25
 8003b22:	bf48      	it	mi
 8003b24:	b2ad      	uxthmi	r5, r5
 8003b26:	e7e6      	b.n	8003af6 <_printf_i+0x182>
 8003b28:	4616      	mov	r6, r2
 8003b2a:	e7bb      	b.n	8003aa4 <_printf_i+0x130>
 8003b2c:	680b      	ldr	r3, [r1, #0]
 8003b2e:	6826      	ldr	r6, [r4, #0]
 8003b30:	6960      	ldr	r0, [r4, #20]
 8003b32:	1d1d      	adds	r5, r3, #4
 8003b34:	600d      	str	r5, [r1, #0]
 8003b36:	0635      	lsls	r5, r6, #24
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	d501      	bpl.n	8003b40 <_printf_i+0x1cc>
 8003b3c:	6018      	str	r0, [r3, #0]
 8003b3e:	e002      	b.n	8003b46 <_printf_i+0x1d2>
 8003b40:	0671      	lsls	r1, r6, #25
 8003b42:	d5fb      	bpl.n	8003b3c <_printf_i+0x1c8>
 8003b44:	8018      	strh	r0, [r3, #0]
 8003b46:	2300      	movs	r3, #0
 8003b48:	6123      	str	r3, [r4, #16]
 8003b4a:	4616      	mov	r6, r2
 8003b4c:	e7ba      	b.n	8003ac4 <_printf_i+0x150>
 8003b4e:	680b      	ldr	r3, [r1, #0]
 8003b50:	1d1a      	adds	r2, r3, #4
 8003b52:	600a      	str	r2, [r1, #0]
 8003b54:	681e      	ldr	r6, [r3, #0]
 8003b56:	6862      	ldr	r2, [r4, #4]
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	f7fc fb48 	bl	80001f0 <memchr>
 8003b60:	b108      	cbz	r0, 8003b66 <_printf_i+0x1f2>
 8003b62:	1b80      	subs	r0, r0, r6
 8003b64:	6060      	str	r0, [r4, #4]
 8003b66:	6863      	ldr	r3, [r4, #4]
 8003b68:	6123      	str	r3, [r4, #16]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b70:	e7a8      	b.n	8003ac4 <_printf_i+0x150>
 8003b72:	6923      	ldr	r3, [r4, #16]
 8003b74:	4632      	mov	r2, r6
 8003b76:	4649      	mov	r1, r9
 8003b78:	4640      	mov	r0, r8
 8003b7a:	47d0      	blx	sl
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	d0ab      	beq.n	8003ad8 <_printf_i+0x164>
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	079b      	lsls	r3, r3, #30
 8003b84:	d413      	bmi.n	8003bae <_printf_i+0x23a>
 8003b86:	68e0      	ldr	r0, [r4, #12]
 8003b88:	9b03      	ldr	r3, [sp, #12]
 8003b8a:	4298      	cmp	r0, r3
 8003b8c:	bfb8      	it	lt
 8003b8e:	4618      	movlt	r0, r3
 8003b90:	e7a4      	b.n	8003adc <_printf_i+0x168>
 8003b92:	2301      	movs	r3, #1
 8003b94:	4632      	mov	r2, r6
 8003b96:	4649      	mov	r1, r9
 8003b98:	4640      	mov	r0, r8
 8003b9a:	47d0      	blx	sl
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	d09b      	beq.n	8003ad8 <_printf_i+0x164>
 8003ba0:	3501      	adds	r5, #1
 8003ba2:	68e3      	ldr	r3, [r4, #12]
 8003ba4:	9903      	ldr	r1, [sp, #12]
 8003ba6:	1a5b      	subs	r3, r3, r1
 8003ba8:	42ab      	cmp	r3, r5
 8003baa:	dcf2      	bgt.n	8003b92 <_printf_i+0x21e>
 8003bac:	e7eb      	b.n	8003b86 <_printf_i+0x212>
 8003bae:	2500      	movs	r5, #0
 8003bb0:	f104 0619 	add.w	r6, r4, #25
 8003bb4:	e7f5      	b.n	8003ba2 <_printf_i+0x22e>
 8003bb6:	bf00      	nop
 8003bb8:	08003e4d 	.word	0x08003e4d
 8003bbc:	08003e5e 	.word	0x08003e5e

08003bc0 <memcpy>:
 8003bc0:	440a      	add	r2, r1
 8003bc2:	4291      	cmp	r1, r2
 8003bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bc8:	d100      	bne.n	8003bcc <memcpy+0xc>
 8003bca:	4770      	bx	lr
 8003bcc:	b510      	push	{r4, lr}
 8003bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bd6:	4291      	cmp	r1, r2
 8003bd8:	d1f9      	bne.n	8003bce <memcpy+0xe>
 8003bda:	bd10      	pop	{r4, pc}

08003bdc <memmove>:
 8003bdc:	4288      	cmp	r0, r1
 8003bde:	b510      	push	{r4, lr}
 8003be0:	eb01 0402 	add.w	r4, r1, r2
 8003be4:	d902      	bls.n	8003bec <memmove+0x10>
 8003be6:	4284      	cmp	r4, r0
 8003be8:	4623      	mov	r3, r4
 8003bea:	d807      	bhi.n	8003bfc <memmove+0x20>
 8003bec:	1e43      	subs	r3, r0, #1
 8003bee:	42a1      	cmp	r1, r4
 8003bf0:	d008      	beq.n	8003c04 <memmove+0x28>
 8003bf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bfa:	e7f8      	b.n	8003bee <memmove+0x12>
 8003bfc:	4402      	add	r2, r0
 8003bfe:	4601      	mov	r1, r0
 8003c00:	428a      	cmp	r2, r1
 8003c02:	d100      	bne.n	8003c06 <memmove+0x2a>
 8003c04:	bd10      	pop	{r4, pc}
 8003c06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c0e:	e7f7      	b.n	8003c00 <memmove+0x24>

08003c10 <_free_r>:
 8003c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c12:	2900      	cmp	r1, #0
 8003c14:	d048      	beq.n	8003ca8 <_free_r+0x98>
 8003c16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c1a:	9001      	str	r0, [sp, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f1a1 0404 	sub.w	r4, r1, #4
 8003c22:	bfb8      	it	lt
 8003c24:	18e4      	addlt	r4, r4, r3
 8003c26:	f000 f8d3 	bl	8003dd0 <__malloc_lock>
 8003c2a:	4a20      	ldr	r2, [pc, #128]	; (8003cac <_free_r+0x9c>)
 8003c2c:	9801      	ldr	r0, [sp, #4]
 8003c2e:	6813      	ldr	r3, [r2, #0]
 8003c30:	4615      	mov	r5, r2
 8003c32:	b933      	cbnz	r3, 8003c42 <_free_r+0x32>
 8003c34:	6063      	str	r3, [r4, #4]
 8003c36:	6014      	str	r4, [r2, #0]
 8003c38:	b003      	add	sp, #12
 8003c3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c3e:	f000 b8cd 	b.w	8003ddc <__malloc_unlock>
 8003c42:	42a3      	cmp	r3, r4
 8003c44:	d90b      	bls.n	8003c5e <_free_r+0x4e>
 8003c46:	6821      	ldr	r1, [r4, #0]
 8003c48:	1862      	adds	r2, r4, r1
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	bf04      	itt	eq
 8003c4e:	681a      	ldreq	r2, [r3, #0]
 8003c50:	685b      	ldreq	r3, [r3, #4]
 8003c52:	6063      	str	r3, [r4, #4]
 8003c54:	bf04      	itt	eq
 8003c56:	1852      	addeq	r2, r2, r1
 8003c58:	6022      	streq	r2, [r4, #0]
 8003c5a:	602c      	str	r4, [r5, #0]
 8003c5c:	e7ec      	b.n	8003c38 <_free_r+0x28>
 8003c5e:	461a      	mov	r2, r3
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	b10b      	cbz	r3, 8003c68 <_free_r+0x58>
 8003c64:	42a3      	cmp	r3, r4
 8003c66:	d9fa      	bls.n	8003c5e <_free_r+0x4e>
 8003c68:	6811      	ldr	r1, [r2, #0]
 8003c6a:	1855      	adds	r5, r2, r1
 8003c6c:	42a5      	cmp	r5, r4
 8003c6e:	d10b      	bne.n	8003c88 <_free_r+0x78>
 8003c70:	6824      	ldr	r4, [r4, #0]
 8003c72:	4421      	add	r1, r4
 8003c74:	1854      	adds	r4, r2, r1
 8003c76:	42a3      	cmp	r3, r4
 8003c78:	6011      	str	r1, [r2, #0]
 8003c7a:	d1dd      	bne.n	8003c38 <_free_r+0x28>
 8003c7c:	681c      	ldr	r4, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	6053      	str	r3, [r2, #4]
 8003c82:	4421      	add	r1, r4
 8003c84:	6011      	str	r1, [r2, #0]
 8003c86:	e7d7      	b.n	8003c38 <_free_r+0x28>
 8003c88:	d902      	bls.n	8003c90 <_free_r+0x80>
 8003c8a:	230c      	movs	r3, #12
 8003c8c:	6003      	str	r3, [r0, #0]
 8003c8e:	e7d3      	b.n	8003c38 <_free_r+0x28>
 8003c90:	6825      	ldr	r5, [r4, #0]
 8003c92:	1961      	adds	r1, r4, r5
 8003c94:	428b      	cmp	r3, r1
 8003c96:	bf04      	itt	eq
 8003c98:	6819      	ldreq	r1, [r3, #0]
 8003c9a:	685b      	ldreq	r3, [r3, #4]
 8003c9c:	6063      	str	r3, [r4, #4]
 8003c9e:	bf04      	itt	eq
 8003ca0:	1949      	addeq	r1, r1, r5
 8003ca2:	6021      	streq	r1, [r4, #0]
 8003ca4:	6054      	str	r4, [r2, #4]
 8003ca6:	e7c7      	b.n	8003c38 <_free_r+0x28>
 8003ca8:	b003      	add	sp, #12
 8003caa:	bd30      	pop	{r4, r5, pc}
 8003cac:	20000090 	.word	0x20000090

08003cb0 <_malloc_r>:
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb2:	1ccd      	adds	r5, r1, #3
 8003cb4:	f025 0503 	bic.w	r5, r5, #3
 8003cb8:	3508      	adds	r5, #8
 8003cba:	2d0c      	cmp	r5, #12
 8003cbc:	bf38      	it	cc
 8003cbe:	250c      	movcc	r5, #12
 8003cc0:	2d00      	cmp	r5, #0
 8003cc2:	4606      	mov	r6, r0
 8003cc4:	db01      	blt.n	8003cca <_malloc_r+0x1a>
 8003cc6:	42a9      	cmp	r1, r5
 8003cc8:	d903      	bls.n	8003cd2 <_malloc_r+0x22>
 8003cca:	230c      	movs	r3, #12
 8003ccc:	6033      	str	r3, [r6, #0]
 8003cce:	2000      	movs	r0, #0
 8003cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cd2:	f000 f87d 	bl	8003dd0 <__malloc_lock>
 8003cd6:	4921      	ldr	r1, [pc, #132]	; (8003d5c <_malloc_r+0xac>)
 8003cd8:	680a      	ldr	r2, [r1, #0]
 8003cda:	4614      	mov	r4, r2
 8003cdc:	b99c      	cbnz	r4, 8003d06 <_malloc_r+0x56>
 8003cde:	4f20      	ldr	r7, [pc, #128]	; (8003d60 <_malloc_r+0xb0>)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	b923      	cbnz	r3, 8003cee <_malloc_r+0x3e>
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	f000 f862 	bl	8003db0 <_sbrk_r>
 8003cec:	6038      	str	r0, [r7, #0]
 8003cee:	4629      	mov	r1, r5
 8003cf0:	4630      	mov	r0, r6
 8003cf2:	f000 f85d 	bl	8003db0 <_sbrk_r>
 8003cf6:	1c43      	adds	r3, r0, #1
 8003cf8:	d123      	bne.n	8003d42 <_malloc_r+0x92>
 8003cfa:	230c      	movs	r3, #12
 8003cfc:	6033      	str	r3, [r6, #0]
 8003cfe:	4630      	mov	r0, r6
 8003d00:	f000 f86c 	bl	8003ddc <__malloc_unlock>
 8003d04:	e7e3      	b.n	8003cce <_malloc_r+0x1e>
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	1b5b      	subs	r3, r3, r5
 8003d0a:	d417      	bmi.n	8003d3c <_malloc_r+0x8c>
 8003d0c:	2b0b      	cmp	r3, #11
 8003d0e:	d903      	bls.n	8003d18 <_malloc_r+0x68>
 8003d10:	6023      	str	r3, [r4, #0]
 8003d12:	441c      	add	r4, r3
 8003d14:	6025      	str	r5, [r4, #0]
 8003d16:	e004      	b.n	8003d22 <_malloc_r+0x72>
 8003d18:	6863      	ldr	r3, [r4, #4]
 8003d1a:	42a2      	cmp	r2, r4
 8003d1c:	bf0c      	ite	eq
 8003d1e:	600b      	streq	r3, [r1, #0]
 8003d20:	6053      	strne	r3, [r2, #4]
 8003d22:	4630      	mov	r0, r6
 8003d24:	f000 f85a 	bl	8003ddc <__malloc_unlock>
 8003d28:	f104 000b 	add.w	r0, r4, #11
 8003d2c:	1d23      	adds	r3, r4, #4
 8003d2e:	f020 0007 	bic.w	r0, r0, #7
 8003d32:	1ac2      	subs	r2, r0, r3
 8003d34:	d0cc      	beq.n	8003cd0 <_malloc_r+0x20>
 8003d36:	1a1b      	subs	r3, r3, r0
 8003d38:	50a3      	str	r3, [r4, r2]
 8003d3a:	e7c9      	b.n	8003cd0 <_malloc_r+0x20>
 8003d3c:	4622      	mov	r2, r4
 8003d3e:	6864      	ldr	r4, [r4, #4]
 8003d40:	e7cc      	b.n	8003cdc <_malloc_r+0x2c>
 8003d42:	1cc4      	adds	r4, r0, #3
 8003d44:	f024 0403 	bic.w	r4, r4, #3
 8003d48:	42a0      	cmp	r0, r4
 8003d4a:	d0e3      	beq.n	8003d14 <_malloc_r+0x64>
 8003d4c:	1a21      	subs	r1, r4, r0
 8003d4e:	4630      	mov	r0, r6
 8003d50:	f000 f82e 	bl	8003db0 <_sbrk_r>
 8003d54:	3001      	adds	r0, #1
 8003d56:	d1dd      	bne.n	8003d14 <_malloc_r+0x64>
 8003d58:	e7cf      	b.n	8003cfa <_malloc_r+0x4a>
 8003d5a:	bf00      	nop
 8003d5c:	20000090 	.word	0x20000090
 8003d60:	20000094 	.word	0x20000094

08003d64 <_realloc_r>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	4607      	mov	r7, r0
 8003d68:	4614      	mov	r4, r2
 8003d6a:	460e      	mov	r6, r1
 8003d6c:	b921      	cbnz	r1, 8003d78 <_realloc_r+0x14>
 8003d6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003d72:	4611      	mov	r1, r2
 8003d74:	f7ff bf9c 	b.w	8003cb0 <_malloc_r>
 8003d78:	b922      	cbnz	r2, 8003d84 <_realloc_r+0x20>
 8003d7a:	f7ff ff49 	bl	8003c10 <_free_r>
 8003d7e:	4625      	mov	r5, r4
 8003d80:	4628      	mov	r0, r5
 8003d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d84:	f000 f830 	bl	8003de8 <_malloc_usable_size_r>
 8003d88:	42a0      	cmp	r0, r4
 8003d8a:	d20f      	bcs.n	8003dac <_realloc_r+0x48>
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	4638      	mov	r0, r7
 8003d90:	f7ff ff8e 	bl	8003cb0 <_malloc_r>
 8003d94:	4605      	mov	r5, r0
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d0f2      	beq.n	8003d80 <_realloc_r+0x1c>
 8003d9a:	4631      	mov	r1, r6
 8003d9c:	4622      	mov	r2, r4
 8003d9e:	f7ff ff0f 	bl	8003bc0 <memcpy>
 8003da2:	4631      	mov	r1, r6
 8003da4:	4638      	mov	r0, r7
 8003da6:	f7ff ff33 	bl	8003c10 <_free_r>
 8003daa:	e7e9      	b.n	8003d80 <_realloc_r+0x1c>
 8003dac:	4635      	mov	r5, r6
 8003dae:	e7e7      	b.n	8003d80 <_realloc_r+0x1c>

08003db0 <_sbrk_r>:
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	4d06      	ldr	r5, [pc, #24]	; (8003dcc <_sbrk_r+0x1c>)
 8003db4:	2300      	movs	r3, #0
 8003db6:	4604      	mov	r4, r0
 8003db8:	4608      	mov	r0, r1
 8003dba:	602b      	str	r3, [r5, #0]
 8003dbc:	f7fc fe80 	bl	8000ac0 <_sbrk>
 8003dc0:	1c43      	adds	r3, r0, #1
 8003dc2:	d102      	bne.n	8003dca <_sbrk_r+0x1a>
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	b103      	cbz	r3, 8003dca <_sbrk_r+0x1a>
 8003dc8:	6023      	str	r3, [r4, #0]
 8003dca:	bd38      	pop	{r3, r4, r5, pc}
 8003dcc:	2000019c 	.word	0x2000019c

08003dd0 <__malloc_lock>:
 8003dd0:	4801      	ldr	r0, [pc, #4]	; (8003dd8 <__malloc_lock+0x8>)
 8003dd2:	f000 b811 	b.w	8003df8 <__retarget_lock_acquire_recursive>
 8003dd6:	bf00      	nop
 8003dd8:	200001a4 	.word	0x200001a4

08003ddc <__malloc_unlock>:
 8003ddc:	4801      	ldr	r0, [pc, #4]	; (8003de4 <__malloc_unlock+0x8>)
 8003dde:	f000 b80c 	b.w	8003dfa <__retarget_lock_release_recursive>
 8003de2:	bf00      	nop
 8003de4:	200001a4 	.word	0x200001a4

08003de8 <_malloc_usable_size_r>:
 8003de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dec:	1f18      	subs	r0, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	bfbc      	itt	lt
 8003df2:	580b      	ldrlt	r3, [r1, r0]
 8003df4:	18c0      	addlt	r0, r0, r3
 8003df6:	4770      	bx	lr

08003df8 <__retarget_lock_acquire_recursive>:
 8003df8:	4770      	bx	lr

08003dfa <__retarget_lock_release_recursive>:
 8003dfa:	4770      	bx	lr

08003dfc <_init>:
 8003dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfe:	bf00      	nop
 8003e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e02:	bc08      	pop	{r3}
 8003e04:	469e      	mov	lr, r3
 8003e06:	4770      	bx	lr

08003e08 <_fini>:
 8003e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0a:	bf00      	nop
 8003e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0e:	bc08      	pop	{r3}
 8003e10:	469e      	mov	lr, r3
 8003e12:	4770      	bx	lr
